name: 📊 Hygiene Checks Pipeline
on:
  workflow_dispatch: # Run manually
  # schedule:
    # Runs at 9:00 AM and 9:00 PM IST, Monday-Thursday
    # 9:00 AM IST -> 3:30 AM UTC
    # 9:00 PM IST -> 3:30 PM UTC
    # - cron: '30 3,15 * * 1-4,6'

    # Runs on Friday at 12:09 AM, 9:00 AM, and 12:15 PM IST
    # 12:09 AM IST -> 6:39 PM UTC (on Thursday)
    # 9:00 AM IST -> 3:30 AM UTC
    # 12:15 PM IST -> 6:45 AM UTC
    # - cron: '39 18 * * 4' # For Friday 12:09 AM IST (runs on Thursday UTC)
    # - cron: '30 3 * * 5' # For Friday 9:00 AM IST
    # - cron: '45 6 * * 5' # For Friday 12:15 PM IST
#  push:
#    branches:
#      - main

jobs:
  hygiene-checks:
    name: Hygiene Checks - Checkstyle + PMD + JaCoCo + Sonar
    runs-on: windows-latest
    env:
      SONAR_ORG: ${{ vars.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
      SONAR_FETCH_SLEEP_TIME: 27
      MODULE_PATHS: |
        udemy_lpa_javamasterclass_main=src/main/java/com/hb/study/udemy_lpa_javamasterclass
        misc_utils_main=misc_utils/src/main/java/com/hb/study/misc_utils
        udemy_lpa_javamasterclass_test=src/test/java/com/hb/study/udemy_lpa_javamasterclass
        misc_utils_test=misc_utils/src/test/java/com/hb/study/misc_utils
      # --- Code Coverage ---
      JACOCO_MIN_COVERAGE: 75        # Require at least 75% coverage

      # --- Aggregate Violations ---
      CHECKSTYLE_PMD_MAX_TOTAL_VIOLATIONS: 300  # Maximum total violations (Checkstyle + PMD)
      CHECKSTYLE_MAX_VIOLATIONS: 200            # Max Checkstyle violations per module
      PMD_MAX_VIOLATIONS: 50                    # Max PMD violations per module

      # --- SonarCloud Severity Thresholds ---
      BLOCKER_MAX: 0      # Any Blocker fails hygiene
      HIGH_MAX: 10        # Maximum allowed high severity issues
      MEDIUM_MAX: 20      # Maximum allowed medium severity issues
      LOW_MAX: 30         # Maximum allowed low severity issues
      INFO_MAX: 50        # Maximum allowed informational issues
    steps:
      # This step will run only if the event is NOT manual or scheduled or push to main
      - name: Exit for non-supported events
        if: github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' && github.event_name != 'push'
        shell: pwsh
        run: |
          Write-Host "This workflow is not configured to run on a '${{ github.event_name }}' event which is not supported → exiting with failure."
          echo
          # Exit the job successfully, so it doesn't appear as a failure
          echo "cancel=true" >> $env:GITHUB_ENV 
          echo "cancelReason=❌ This workflow is not configured to run on a '${{ github.event_name }}' event which is not supported → exiting with failure." >> $env:GITHUB_ENV
        
      # This step will check the commit message and set an output.
      # It will always run on push to main, but its output determines if the next job runs.
      - name: Decide whether to run hygiene checks
        id: decide
        shell: bash
        run: |
            eventName="${{ github.event_name }}"
            if [[ "$eventName" == "push" ]]; then
            branchName="${{ github.ref_name }}"  # gives just "main" or the branch name
              if [[ "$branchName" != "main" ]]; then
                echo "Push event but branch is '$branchName' (not main) → exiting with failure."
                echo "cancel=true" >> $GITHUB_ENV
                echo "cancelReason=❌ Push event but branch is '$branchName' (not main) → exiting with failure." >> $GITHUB_ENV
              else
                commit_message="${{ github.event.head_commit.message }}"
                if [[ "$commit_message" =~ execute.*?hygiene.*?sweep ]]; then
                  echo "Push to main with matching commit message → continue."
                else
                  echo "Push to main without trigger phrase → exiting with failure."
                  echo "cancel=true" >> $GITHUB_ENV
                  echo "cancelReason=❌ Push to main without trigger phrase → exiting with failure." >> $GITHUB_ENV
                fi
              fi
            elif [[ "$eventName" == "schedule" || "$eventName" == "workflow_dispatch" ]]; then
              echo "Event is $eventName → continue."
            else
              echo "Unsupported event ($eventName) → exiting with failure."
              echo "cancel=true" >> $GITHUB_ENV
              echo "cancelReason=❌ Unsupported event ($eventName) → PR required → exiting with failure." >> $GITHUB_ENV
            fi

      - name: Log trigger for scheduled runs
        if: github.event_name == 'schedule'
        shell: pwsh
        run: |
          if ("${{ github.event.schedule }}" -eq '30 3,15 * * 1-4') {
            Write-Host "✅ Executing for a business day (Mon-Thurs)."
          } elseif ("${{ github.event.schedule }}" -eq '39 18 * * 4') {
            Write-Host "✅ Executing on Friday (12:09 AM IST)."
          } elseif ("${{ github.event.schedule }}" -eq '30 3 * * 5') {
            Write-Host "✅ Executing on Friday (9:00 AM IST)."
          } elseif ("${{ github.event.schedule }}" -eq '45 6 * * 5') {
            Write-Host "✅ Executing on Friday (12:15 PM IST)."
          }

      - name: Log trigger for manual runs
        if: github.event_name == 'workflow_dispatch'
        shell: pwsh
        run: Write-Host "✅ Executing manually via workflow_dispatch."

      - name: Log trigger for push event
        if: github.event_name == 'push'
        shell: pwsh
        run: Write-Host "✅ Executing due to push event triggered by special commit message."

        #Checkout Code for Supported Event Triggers (schedule, workflow_dispatch, push to main)
      - name: Checkout Code for Supported Event Triggers
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          token: ${{ secrets.PAT_TOKEN }} # no expiry
          fetch-depth: 0

      - name: Check stage vs main state
        id: stage_vs_main_state
        shell: bash
        env:
          MAX_AHEAD_COMMITS: 7
          MAX_DIVERGENCE_DAYS: 7
        run: |
          git fetch origin main stage
          MAX_AHEAD_COMMITS=$(echo "$MAX_AHEAD_COMMITS" | tr -d '\r')

          # Case 1: stage == main
          if [[ "$(git rev-list origin/main..origin/stage --count)" -eq 0 ]] && \
             [[ "$(git rev-list origin/stage..origin/main --count)" -eq 0 ]]; then
            echo "✅ Stage already in sync with main (no merge needed)"  
            echo "STAGE_VS_MAIN_STATE=✅ Stage already in sync with main (no merge needed)" >> $GITHUB_OUTPUT
          # Case 2: stage ahead of main (fast-forward possible)
          elif git merge-base --is-ancestor origin/main origin/stage; then
            ahead=$(git rev-list origin/main..origin/stage --count)
            echo "DEBUG: ahead='$ahead' MAX_AHEAD_COMMITS='${MAX_AHEAD_COMMITS}'"
            if [[ "$ahead" -gt "$MAX_AHEAD_COMMITS" ]]; then 
              echo "❌ Stage is $ahead commits ahead of main. Please PR stage → main." 
              echo "cancel=true" >> $GITHUB_ENV
              echo "cancelReason=❌ Stage is $ahead commits ahead of main. Please PR stage → main → exiting with failure." >> $GITHUB_ENV
            else 
              echo "⚠️ Stage is ${ahead} commit(s) ahead of main (not PR’d yet) → skipped merge, executed hygiene on current main" 
              echo "STAGE_VS_MAIN_STATE=⚠️ Stage is ${ahead} commit(s) ahead of main (not PR’d yet) → skipped merge, executed hygiene on current main" >> $GITHUB_OUTPUT 
              fi
          else # Case 3: stage diverged (not rebased)
              common=$(git merge-base origin/main origin/stage)
              common_ts=$(git show -s --format=%ct $common)
              now_ts=$(date +%s)
              age_days=$(( (now_ts - common_ts) / 86400 ))
      
              if [[ "$age_days" -gt "$MAX_DIVERGENCE_DAYS" ]]; then
                  echo "❌ Stage diverged from main for $age_days days. Please rebase stage → main → exiting with failure."
                  echo "cancel=true" >> $GITHUB_ENV
                  echo "cancelReason=❌ Stage diverged for ${age_days}d → rebase required → exiting with failure." >> $GITHUB_ENV
              fi
              echo "⚠️ Stage is not rebased on main (last common ancestor $age_days days ago) → executed hygiene on current main"
              echo "STAGE_VS_MAIN_STATE=⚠️ Stage diverged ~${age_days}d ago → executed hygiene on current main" >> $GITHUB_OUTPUT
              # echo "⚠️ Stage is not rebased on main → executed hygiene on current main"
              # echo "STAGE_VS_MAIN_STATE=⚠️ Stage is not rebased on main → executed hygiene on current main" >> $GITHUB_OUTPUT
          fi 

      - name: Cancel current workflow gracefully
        if: env.cancel == 'true'
        shell: pwsh
        run: |
          $msg = "$env:cancelReason"
          Write-Host "ℹ️ Failing the job: $msg"
          
          # Add a nice header into GitHub Run Summary (Markdown)
          echo "### ❌ Hygiene Checks Cancelled" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "$msg" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $env:GITHUB_STEP_SUMMARY
          
          # If you want to include branch/commit details, uncomment:
          echo "**Branch:** ${{ github.ref_name }}" >> $env:GITHUB_STEP_SUMMARY
          echo "**Commit Message:** ${{ github.event.head_commit.message }}" >> $env:GITHUB_STEP_SUMMARY
          
          # Stop execution here
          exit 1
  
      ####################################################
          # Hygiene Environment Initialization
      ####################################################
      - name: Setup Hygiene Environment
        id: setup
        uses: ./.github/actions/setup-hygiene-env
        with:
          java-version: "24"
          trigger-event: ${{ github.event_name }}
          ref-name: ${{ github.ref_name }}
          head-ref: ${{ github.head_ref }}
          base-ref: ${{ github.base_ref }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

        ###############################################################
          # HYGIENE HEALTH CHECKS AND UPLOAD REPORTS - COMPOSITE CALL
        ##############################################################

      - name: Hygiene Health Checks and Upload Reports
        id: hygiene-sweep-and-upload-reports
        uses: ./.github/actions/generate-and-upload-reports
        with:
          SKIP_FLAG: ${{ steps.setup.outputs.SKIP_FLAG }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_SCANNER_BIN: ${{ steps.setup.outputs.scanner_bin_win }}

        ##############################################################
          # PUBLISH GITHUB SUMMARY AND SEND-EMAIL - COMPOSITE CALL
        ##############################################################

      - name: PUBLISH GITHUB SUMMARY AND SEND-EMAIL
        id: publish-githubsummary-and-sendemail
        uses: ./.github/actions/compute-and-publish-summary
        with:
          startTime: ${{ steps.setup.outputs.startTime }}
          SKIP_FLAG: ${{ steps.setup.outputs.SKIP_FLAG }}
          COMMIT_MSG: ${{ steps.setup.outputs.COMMIT_MSG }}
          COMMIT_AUTHOR: ${{ steps.setup.outputs.COMMIT_AUTHOR }}
          TRIGGER_EVENT: ${{ steps.setup.outputs.TRIGGER_EVENT }}
          SRC_BRANCH: ${{ steps.setup.outputs.SRC_BRANCH }}
          TGT_BRANCH: ${{ steps.setup.outputs.TGT_BRANCH }}
          BRANCH_EXECUTED: ${{ steps.setup.outputs.TGT_BRANCH }}
          ARTIFACT_URL: ${{ steps.hygiene-sweep-and-upload-reports.outputs.ARTIFACT_URL }}
          STAGE_VS_MAIN_STATE: ${{ steps.stage_vs_main_state.outputs.STAGE_VS_MAIN_STATE }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SMTP_SERVER_ADDRESS: ${{ vars.SMTP_SERVER_ADDRESS }}
          SMTP_SERVER_PORT: ${{ vars.SMTP_SERVER_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          EMAIL_RECIPIENT: ${{ vars.EMAIL_RECIPIENT }}
          JACOCO_MIN_COVERAGE: ${{ env.JACOCO_MIN_COVERAGE }}
          CHECKSTYLE_PMD_MAX_TOTAL_VIOLATIONS: ${{ env.CHECKSTYLE_PMD_MAX_TOTAL_VIOLATIONS }}
          CHECKSTYLE_MAX_VIOLATIONS: ${{ env.CHECKSTYLE_MAX_VIOLATIONS }}
          PMD_MAX_VIOLATIONS: ${{ env.PMD_MAX_VIOLATIONS }}
          BLOCKER_MAX: ${{ env.BLOCKER_MAX }}
          HIGH_MAX: ${{ env.HIGH_MAX }}
          MEDIUM_MAX: ${{ env.MEDIUM_MAX }}
          LOW_MAX: ${{ env.LOW_MAX }}
          INFO_MAX: ${{ env.INFO_MAX }}

        #############################
          # FULL CLEANUP AND VERIFY
        ##############################

      - name: Full Cleanup and Verify Composite Call
        id: cleanup-and-verify-composite-call
        uses: ./.github/actions/full-cleanup-and-verify
