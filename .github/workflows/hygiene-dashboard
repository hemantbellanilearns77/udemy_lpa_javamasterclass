name: hygiene-checks

on:
  push:
    branches: [main]

jobs:
  hygiene-checks:
    runs-on: windows-latest
    env:
      JACOCO_MIN_COVERAGE: 80

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 24

      - name: 📦 Download Required Tools
        run: |
          REM Checkstyle
          mkdir tools\checkstyle
          curl -L -o tools\checkstyle\checkstyle-10.26.1-all.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.26.1/checkstyle-10.26.1-all.jar

          REM PMD
          curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.15.0/pmd-dist-7.15.0-bin.zip
          powershell -Command "Expand-Archive -Path 'pmd.zip' -DestinationPath 'tools/pmd'"

          REM JaCoCo + JUnit Console
          mkdir tools\jacoco-0.8.13\lib
          curl -L -o tools\jacoco-0.8.13\lib\jacocoagent.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.13/org.jacoco.agent-0.8.13-runtime.jar
          curl -L -o tools\jacoco-0.8.13\lib\jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.13/org.jacoco.cli-0.8.13-nodeps.jar
          mkdir tools\junit-console
          curl -L -o tools\junit-console\junit-platform-console-standalone-1.13.0.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.13.0/junit-platform-console-standalone-1.13.0.jar
        shell: cmd

      - name: 🧼 Run Checkstyle
        run: scripts\run-checkstyle.bat
        shell: cmd

      - name: 🧼 Run PMD
        run: scripts\run-pmd.bat
        shell: cmd

      - name: 🛠️ Compile Java Modules if Needed
        shell: cmd
        run: |
          set "JAVA_HOME=%JAVA_HOME%"
          set "OUT_PROD=out\production"
          set "OUT_TEST=out\test"
          set "SRC_MAIN=src\main\java"
          set "SRC_MISC=misc_utils\src\main\java"
          set "TEST_MAIN=src\test\java"
          set "TEST_MISC=misc_utils\src\test\java"
          set "JUNIT_JAR=tools\junit-console\junit-platform-console-standalone-1.13.0.jar"

          if not exist "%OUT_PROD%\udemy_lpa_javamasterclass" (
            if not exist "%OUT_PROD%\misc_utils" (
              echo ⚙ Compilation triggered

              rmdir /s /q "%OUT_PROD%" >nul 2>&1
              rmdir /s /q "%OUT_TEST%" >nul 2>&1

              mkdir "%OUT_PROD%\udemy_lpa_javamasterclass"
              mkdir "%OUT_PROD%\misc_utils"
              mkdir "%OUT_TEST%\udemy_lpa_javamasterclass"
              mkdir "%OUT_TEST%\misc_utils"

              echo ✍ Compiling udemy_lpa_javamasterclass
              dir /s /b "%SRC_MAIN%\*.java" > sources_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -d "%OUT_PROD%\udemy_lpa_javamasterclass" @sources_main.txt

              echo ✍ Compiling misc_utils
              dir /s /b "%SRC_MISC%\*.java" > sources_misc.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass" -d "%OUT_PROD%\misc_utils" @sources_misc.txt

              echo ✍ Compiling tests (masterclass)
              dir /s /b "%TEST_MAIN%\*.java" > sources_test_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\udemy_lpa_javamasterclass" @sources_test_main.txt

              echo ✍ Compiling tests (misc_utils)
              if exist "%TEST_MISC%" (
                dir /s /b "%TEST_MISC%\*.java" > sources_test_misc.txt
                javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\misc_utils" @sources_test_misc.txt
              )

              del sources_main.txt sources_misc.txt sources_test_main.txt sources_test_misc.txt
            )
          )

      - name: 🧪 Run JaCoCo Coverage Analysis
        run: scripts\run-coverage-analysis.bat
        shell: cmd

      - name: 📤 Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: hygiene-reports
          path: |
            reports\checkstyle\*.*
            reports\pmd\*.*
            reports\jacoco\*.*
            logs\checkstyle-logs\*.*
            logs\pmd-analysis-logs\*.*
            logs\jacoco-logs\*.*

      - name: 📊 Add Final Summary to UI
        shell: pwsh
        run: |
          # 🧪 JaCoCo Summary
          $xml = Select-Xml -Path reports\jacoco\jacoco-latest.xml -XPath "//report/counter[@type='INSTRUCTION']"
          $missed = [int]$xml.Node.missed
          $covered = [int]$xml.Node.covered
          $total = $missed + $covered
          if ($total -gt 0) {
            $percent = [math]::Round(100 * $covered / $total, 2)
          } else {
            $percent = 0
          }

          echo "### 🧪 JaCoCo Coverage Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "| Metric    | Value     |" >> $env:GITHUB_STEP_SUMMARY
          echo "|-----------|-----------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| Covered   | $covered   |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Missed    | $missed    |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Total     | $total     |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Coverage  | $percent%  |" >> $env:GITHUB_STEP_SUMMARY

          if ($percent -lt $env:JACOCO_MIN_COVERAGE) {
            echo "⚠️ Warning: Coverage $percent% is below threshold $env:JACOCO_MIN_COVERAGE%" >> $env:GITHUB_STEP_SUMMARY
          }

          # 🧼 Static Analysis Summary (via bash)
          bash -c '
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🧼 Static Analysis Violation Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Tool        | Violations |" >> $GITHUB_STEP_SUMMARY
            echo "|-------------|------------|"

            CHECKSTYLE_COUNT=0
            PMD_COUNT=0

            if compgen -G "reports/checkstyle/*.txt" > /dev/null; then
              CHECKSTYLE_COUNT=$(grep -E "^[^[:space:]]" reports/checkstyle/*.txt | wc -l || echo 0)
            fi

            if compgen -G "reports/pmd/*.txt" > /dev/null; then
              PMD_COUNT=$(grep -E "^[A-Za-z]:" reports/pmd/*.txt | wc -l || echo 0)
            fi

            TOTAL=$((CHECKSTYLE_COUNT + PMD_COUNT))
            echo "| Checkstyle  | $CHECKSTYLE_COUNT       |" >> $GITHUB_STEP_SUMMARY
            echo "| PMD         | $PMD_COUNT       |" >> $GITHUB_STEP_SUMMARY
            echo "**Total Violations:** \`$TOTAL\`" >> $GITHUB_STEP_SUMMARY

            if [ "$TOTAL" -le 50 ]; then
              echo "**✅ Clean! Great job keeping code quality high.**" >> $GITHUB_STEP_SUMMARY
            elif [ "$TOTAL" -le 100 ]; then
              echo "**⚠️ Moderate issues found — consider refactoring.**" >> $GITHUB_STEP_SUMMARY
            else
              echo "**❌ High number of violations — review and clean up.**" >> $GITHUB_STEP_SUMMARY
            fi
          '

      - name: 🧹 Cleanup Temp Files
        shell: cmd
        run: |
          del sources_*.txt 2>nul
          del pmd.zip 2>nul
