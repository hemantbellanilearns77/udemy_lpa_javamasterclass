name: 📊 Hygiene Checks Pipeline

on:
  push:
    branches: [ main ]

jobs:
  hygiene-checks:
    name: Hygiene Checks - Checkstyle + PMD + JaCoCo + Sonar
    runs-on: windows-2025
    env:
      JACOCO_MIN_COVERAGE: 0.05
      CHECKSTYLE_PMD_MAX_TOTAL_VIOLATIONS: 50
      CHECKSTYLE_MAX_VIOLATIONS: 16000
      PMD_MAX_VIOLATIONS: 63
      SONAR_ORG: ${{ vars.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
      SKIP_ECHO: true

    steps:

      - name: ?? Capture Job Start Time
        id: start_time
        shell: bash
        run: echo "startTime=$(date +%s)" >> $GITHUB_OUTPUT

      - name: ?? Checkout Code
        uses: actions/checkout@v4

      ##########################
      # EXTRACT COMMIT STATS
      ##########################

      - name: ?? Extract Commit Info (Windows PowerShell)
        id: commit_info
        shell: pwsh
        run: |
          $shortSha = git rev-parse --short HEAD
          $fullSha = git rev-parse HEAD
          $msg = git log -1 --pretty=%s
          $author = git log -1 --pretty='%an'
          $date = git log -1 --date=iso-local --pretty='%cd'

          $commitTs = git log -1 --pretty=%ct
          $nowTs = [int][double]::Parse((Get-Date -UFormat %s))
          $deltaMin = [math]::Floor(($nowTs - $commitTs) / 60)

          if ($deltaMin -lt 1) {
            $ago = "Just now"
          } elseif ($deltaMin -eq 1) {
            $ago = "1 minute ago"
          } else {
            $ago = "$deltaMin minutes ago"
          }

          "SHORT_SHA=$shortSha" >> $env:GITHUB_OUTPUT
          "FULL_SHA=$fullSha" >> $env:GITHUB_OUTPUT
          "COMMIT_MSG=$msg" >> $env:GITHUB_OUTPUT
          "COMMIT_AUTHOR=$author" >> $env:GITHUB_OUTPUT
          "COMMIT_DATE=$date" >> $env:GITHUB_OUTPUT
          "COMMIT_AGO=$ago" >> $env:GITHUB_OUTPUT  

      ##############################################################################
        # Setup JDK 24 (Temurin with Zulu fallback for JaCoCo + Compilation)
      ##############################################################################
      - name: Setup Java (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 24
        continue-on-error: true

      - name: Fallback Setup Java (Zulu)
        if: failure()
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 24
      

      ##########################
      # DOWNLOAD TOOLS
      ##########################

      - name: ?? Download Checkstyle
        run: |
          mkdir tools\checkstyle
          curl -L -o tools\checkstyle\checkstyle-10.26.1-all.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.26.1/checkstyle-10.26.1-all.jar

      - name: ?? Download and Extract PMD
        run: curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.15.0/pmd-dist-7.15.0-bin.zip
        shell: bash

      - name: ?? Extract PMD
        run: |
          mkdir tools\pmd
          powershell -Command "Expand-Archive -Path 'pmd.zip' -DestinationPath 'tools\pmd'"
        shell: cmd

      - name: ?? Download JaCoCo + JUnit Console
        run: |
          mkdir tools\jacoco-0.8.13\lib
          curl -L -o tools\jacoco-0.8.13\lib\jacocoagent.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.13/org.jacoco.agent-0.8.13-runtime.jar
          curl -L -o tools\jacoco-0.8.13\lib\jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.13/org.jacoco.cli-0.8.13-nodeps.jar
          mkdir tools\junit-console
          curl -L -o tools\junit-console\junit-platform-console-standalone-1.13.0.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.13.0/junit-platform-console-standalone-1.13.0.jar
        shell: cmd

      ##########################
      # RUN STATIC ANALYSIS
      ##########################

      - name: ?? Run Checkstyle
        run: scripts\run-checkstyle.bat

      - name: ?? Run PMD
        run: scripts\run-pmd.bat
        shell: cmd

      ##########################
      # COMPILE + JACOCO
      ##########################

      - name: ??? Compile Java Modules if Needed
        shell: cmd
        run: |
          set "JAVA_HOME=%JAVA_HOME%"
          set "OUT_PROD=out\production"
          set "OUT_TEST=out\test"
          set "SRC_MAIN=src\main\java"
          set "SRC_MISC=misc_utils\src\main\java"
          set "TEST_MAIN=src\test\java"
          set "TEST_MISC=misc_utils\src\test\java"
          set "JUNIT_JAR=tools\junit-console\junit-platform-console-standalone-1.13.0.jar"

          if not exist "%OUT_PROD%\udemy_lpa_javamasterclass" (
            if not exist "%OUT_PROD%\misc_utils" (
              echo ? Compilation triggered

              rmdir /s /q "%OUT_PROD%" >nul 2>&1
              rmdir /s /q "%OUT_TEST%" >nul 2>&1

              mkdir "%OUT_PROD%\udemy_lpa_javamasterclass"
              mkdir "%OUT_PROD%\misc_utils"
              mkdir "%OUT_TEST%\udemy_lpa_javamasterclass"
              mkdir "%OUT_TEST%\misc_utils"

              echo ? Compiling udemy_lpa_javamasterclass
              dir /s /b "%SRC_MAIN%\*.java" > sources_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -d "%OUT_PROD%\udemy_lpa_javamasterclass" @sources_main.txt

              echo ? Compiling misc_utils
              dir /s /b "%SRC_MISC%\*.java" > sources_misc.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass" -d "%OUT_PROD%\misc_utils" @sources_misc.txt

              echo ? Compiling tests (masterclass)
              dir /s /b "%TEST_MAIN%\*.java" > sources_test_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\udemy_lpa_javamasterclass" @sources_test_main.txt

              echo ? Compiling tests (misc_utils)
              if exist "%TEST_MISC%" (
                dir /s /b "%TEST_MISC%\*.java" > sources_test_misc.txt
                javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\misc_utils" @sources_test_misc.txt
              )

              del sources_main.txt sources_misc.txt sources_test_main.txt sources_test_misc.txt
            )
          )

      - name: ?? Run JaCoCo Coverage
        run: scripts\run-coverage-analysis.bat
        shell: cmd

      ##########################
      # UPLOAD REPORTS
      ##########################

      - name: ?? Upload All Reports
        uses: actions/upload-artifact@v4
        with:
          name: hygiene-reports
          path: |
            reports/**
            logs/**

      ##########################
      # DOWNLOAD SONAR-SCANNER
      ##########################

      - name: ?? Download and Setup SonarScanner 7.1.0.4889
        shell: bash
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.1.0.4889-windows-x64.zip
          mkdir tools/sonar-scanner
          unzip sonar-scanner.zip -d tools/sonar-scanner
          echo "SONAR_SCANNER_HOME=$PWD/tools/sonar-scanner-7.1.0.4889-windows" >> $GITHUB_ENV
          echo "$PWD/tools/sonar-scanner/sonar-scanner-7.1.0.4889-windows/bin" >> $GITHUB_PATH

      ################################
        # RUN SONAR CLOUD ANALYSIS
      ################################
      - name: ?? Run SonarCloud Scan (via batch)
        if: success()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: scripts\run-sonar-scan-admin.bat
        shell: cmd

      ##########################
      # SUMMARY SECTION
      ##########################

      - name: 📊 Add Hygiene Summary (Checkstyle + PMD + JaCoCo + Sonar Issues)
        id: metrics
        shell: pwsh
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ############################################################
          # === Parse JaCoCo XML (Overall) ===
          ############################################################
          $xml = Select-Xml -Path reports\jacoco\jacoco-latest.xml -XPath "//report/counter[@type='INSTRUCTION']"
          $missed = [int]$xml.Node.missed
          $covered = [int]$xml.Node.covered
          $total = $missed + $covered
          if ($total -gt 0) {
            $jacocoCoverage = [math]::Round(100 * $covered / $total, 2)
          } else {
            $jacocoCoverage = 0
          }

          function Get-AsciiBar($percent) {
          
            $blocks = 50
            $filled = [math]::Round($blocks * $percent / 100)
            $empty = $blocks - $filled
            return ('█' * $filled) + ('░' * $empty)
          }
          
          
          
          ############################################################
          # === Parse Checkstyle & PMD Reports ===
          ############################################################
          $checkstyleViolations = 0
          if (Test-Path "reports/checkstyle") {
            Get-ChildItem reports/checkstyle/*.txt | ForEach-Object {
              $checkstyleViolations += (Get-Content $_ | Where-Object { $_.Trim() -ne "" }).Count
            }
          }

          $pmdViolations = 0
          if (Test-Path "reports/pmd") {
            Get-ChildItem reports/pmd/*.txt | ForEach-Object {
              $pmdViolations += (Get-Content $_ | Where-Object { $_ -match "^[A-Za-z]:\\" }).Count
            }
          }

          $totalViolations = $checkstyleViolations + $pmdViolations

          ############################################################
          # === Fetch SonarCloud Issue Count (OPEN) ===
          ############################################################
          Start-Sleep -Seconds 27
          
          $projectKey = $env:SONAR_PROJECT_KEY
          $projectOrg = $env:SONAR_ORG
          $branch = "${{ github.ref_name }}"
          # Confirm if token is passed
          if (-not $env:SONAR_TOKEN) {
           Write-Error "⚠ SONAR_TOKEN is empty!"
           exit 1
          }
          $url = "https://sonarcloud.io/api/issues/search?issueStatuses=OPEN,CONFIRMED&id=$projectKey&organization=$projectOrg"
          Write-Host "?? Calling SonarCloud API: $url"
          try {
           $response = Invoke-WebRequest -Uri $url -Method Get
           $body = $response.Content
          
           if ($body -match '"total"\s*:\s*(\d+)') {
             $totalSonarFetchedIssues = $matches[1]
             Write-Host "? Total SonarCloud Issues (OPEN): $totalSonarFetchedIssues"
           } else {
             Write-Error "? Could not extract issue count from response body: $body"
             exit 1
           }
          } catch {
           Write-Error "⚠ API call failed: $_"
           exit 1
          }


          ############################################################
          # === Fetch SonarCloud Coverage Metrics ===
          ############################################################
          $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ secrets.SONAR_TOKEN }}:"))
          $headers = @{ Authorization = "Basic $encodedAuth" }

          function Get-SonarMetric($metricKey) {
            $url = "https://sonarcloud.io/api/measures/component?component=$projectKey&metricKeys=coverage"
            Write-Host "Coverage Fetch URL is $url"
            try {
              $resp = Invoke-WebRequest -Uri $url -Method Get
              $json = $resp.Content | ConvertFrom-Json
              return $json.component.measures[0].value
            } catch {
              Write-Error "⚠ API call failed: $_"
              exit 1
            }
          }

          $sonarCoverage = Get-SonarMetric "coverage"
          Write-Host "Writing to Host Coverage as fetched from Sonar is $sonarCoverage"
          Write-Output "Writing Output Coverage as fetched from Sonar is $sonarCoverage" 
          if ($sonarCoverage -ge 50) {
            $coverageEmoji = "🟢"
          } elseif ($sonarCoverage -ge 20) {
            $coverageEmoji = "🟡"
          } else {
            $coverageEmoji = "🔴"
          }
          $coverageBar = Get-AsciiBar $sonarCoverage
          
          
          $sonarCoverage = Get-SonarMetric "coverage"
          # Ensure only the first numeric value is used
          if ($sonarCoverage -is [array]) {
            $sonarCoverage = $sonarCoverage[0]
          }
          # Try to cast to a number safely
          $sonarCoverage = [double]($sonarCoverage -replace '[^0-9\.]', '')
          if ($sonarCoverage -ge 50) {
            $coverageEmoji = "🟢"
          } elseif ($sonarCoverage -ge 20) {
            $coverageEmoji = "🟡"
          } else {
            $coverageEmoji = "🔴"
          }
          $coverageBar = Get-AsciiBar $sonarCoverage


          ###########################################################
          # === Fetch Overall Severity Breakdown (UI-Aligned) ===
          ###########################################################
           function Fetch-SonarSeverity($severity) {
            $url = "https://sonarcloud.io/api/issues/search?impactSeverities=$severity&issueStatuses=OPEN,CONFIRMED&organization=$projectOrg&id=$projectKey"
          
            try {
              $resp = Invoke-WebRequest -Uri $url -Headers $headers -Method Get
              $json = $resp.Content | ConvertFrom-Json
              return $json.total
            } catch {
              Write-Error "⚠ API call failed: $_"
              exit 1
            }
          }

          $blocker = Fetch-SonarSeverity "BLOCKER"
          $high = Fetch-SonarSeverity "HIGH"
          $medium = Fetch-SonarSeverity "MEDIUM"
          $low = Fetch-SonarSeverity "LOW"
          $info = Fetch-SonarSeverity "INFO"
          ############################################################
          # === Generate Severity URLs (global and per module) ===
          ############################################################
          $severityLinks = @{
            BLOCKER = "https://sonarcloud.io/project/issues?impactSeverities=BLOCKER&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
            HIGH    = "https://sonarcloud.io/project/issues?impactSeverities=HIGH&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
            MEDIUM  = "https://sonarcloud.io/project/issues?impactSeverities=MEDIUM&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
            LOW     = "https://sonarcloud.io/project/issues?impactSeverities=LOW&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
            INFO    = "https://sonarcloud.io/project/issues?impactSeverities=INFO&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
          }
          
          ###############################################################################
                # === Fetch Module/Package Severity Breakdown (UI-Aligned) ===
          ###############################################################################
            $packageBreakdown = @()
          
            $url = "https://sonarcloud.io/api/issues/search?organization=$projectOrg&id=$projectKey&resolved=false&facets=directories&ps=1"
            Write-Output "URL now is " $url
            try {
            $resp = Invoke-WebRequest -Uri $url -Headers $headers -Method Get
            $json = $resp.Content | ConvertFrom-Json
            $components = $json.facets | Where-Object { $_.property -eq "componentKeys" } | Select-Object -ExpandProperty values
          
            foreach ($comp in $components) {
            $compKey = $comp.val
          
            $row = [PSCustomObject]@{
            Module   = $compKey
            BLOCKER  = (Invoke-WebRequest -Uri "https://sonarcloud.io/api/issues/search?impactSeverities=BLOCKER&componentKeys=$compKey&issueStatuses=OPEN,CONFIRMED&ps=1" | ConvertFrom-Json).total
            HIGH     = (Invoke-WebRequest -Uri "https://sonarcloud.io/api/issues/search?impactSeverities=HIGH&componentKeys=$compKey&issueStatuses=OPEN,CONFIRMED&ps=1" | ConvertFrom-Json).total
            MEDIUM   = (Invoke-WebRequest -Uri "https://sonarcloud.io/api/issues/search?impactSeverities=MEDIUM&componentKeys=$compKey&issueStatuses=OPEN,CONFIRMED&ps=1"  | ConvertFrom-Json).total
            LOW      = (Invoke-WebRequest -Uri "https://sonarcloud.io/api/issues/search?impactSeverities=LOW&componentKeys=$compKey&issueStatuses=OPEN,CONFIRMED&ps=1" | ConvertFrom-Json).total
            INFO     = (Invoke-WebRequest -Uri "https://sonarcloud.io/api/issues/search?impactSeverities=INFO&componentKeys=$compKey&issueStatuses=OPEN,CONFIRMED&ps=1"  | ConvertFrom-Json).total
          }
            $packageBreakdown += $row
          }
          } catch {
              Write-Host "⚠ Could not fetch package breakdown: $_"
          }          
          ############################################################
                # === Generate URLS ===
          ############################################################
           $sonarOverallCodeDashBoardUrl = "https://sonarcloud.io/summary/overall?id=$projectKey&branch=$branch"
           $sonarOpenIssuesDashboardUrl= "https://sonarcloud.io/project/issues?issueStatuses=OPEN%2CCONFIRMED&id=$projectKey"
          
          
          ############################################################
                # === Write Overall Table ===
          ############################################################
          echo "### 📊 Hygiene Summary (Checkstyle + PMD + JaCoCo + Sonar)" >> $env:GITHUB_STEP_SUMMARY
          echo "| **Metric**              | **Value** |" >> $env:GITHUB_STEP_SUMMARY
          echo "|-------------------------|-----------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| Checkstyle Violations   | $checkstyleViolations |" >> $env:GITHUB_STEP_SUMMARY
          echo "| PMD Violations          | $pmdViolations |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Code Coverage (Sonar)   | $sonarCoverage% $coverageEmoji |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Coverage Visual         | <code>$coverageBar</code> |" >> $env:GITHUB_STEP_SUMMARY
          echo "| 🗂 Sonar Issues (Total) | $totalSonarFetchedIssues |" >> $env:GITHUB_STEP_SUMMARY
          echo "| 🟥 BLOCKER              | [$blocker]($($severityLinks.BLOCKER)) |" >> $env:GITHUB_STEP_SUMMARY
          echo "| 🟧 HIGH                 | [$high]($($severityLinks.HIGH)) |" >> $env:GITHUB_STEP_SUMMARY
          echo "| 🟨 MEDIUM               | [$medium]($($severityLinks.MEDIUM)) |" >> $env:GITHUB_STEP_SUMMARY
          echo "| 🟦 LOW                  | [$low]($($severityLinks.LOW)) |" >> $env:GITHUB_STEP_SUMMARY
          echo "| ℹ INFO                  | [$info]($($severityLinks.INFO)) |" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "🌐 [View SonarCloud Overall Code Dashboard]($sonarOverallCodeDashBoardUrl)" >> $env:GITHUB_STEP_SUMMARY
          echo "🌐 [View SonarCloud Issues Breakdown Dashboard]($sonarOpenIssuesDashboardUrl)" >> $env:GITHUB_STEP_SUMMARY

          ############################################################
          # === Write Module Breakdown Table ===
          ############################################################
          if ($packageBreakdown.Count -gt 0) {
            echo "### 📦 SonarCloud Module/Package Severity Breakdown" >> $env:GITHUB_STEP_SUMMARY
            echo "| Module/Package | BLOCKER | HIGH | MEDIUM | LOW | INFO |" >> $env:GITHUB_STEP_SUMMARY
            echo "|---------------|---------|----------|-------|-------|------|" >> $env:GITHUB_STEP_SUMMARY
            foreach ($row in $packageBreakdown) {
              echo "| $($row.Module) | $($row.BLOCKER) | $($row.HIGH) | $($row.MEDIUM) | $($row.LOW) | $($row.INFO) |" >> $env:GITHUB_STEP_SUMMARY
            }
          } else {
            Write-Output "No packageBreakdown obtained" $packageBreakdown
          }
          
          ############################################################
          # === Module Breakdown with clickable module names & severities ===
          ############################################################
            if ($packageBreakdown.Count -gt 0) {
            echo "### 📦 SonarCloud Module/Package Severity Breakdown" >> $env:GITHUB_STEP_SUMMARY
            echo "| Module/Package | BLOCKER | HIGH | MEDIUM | LOW | INFO |" >> $env:GITHUB_STEP_SUMMARY
            echo "|---------------|---------|------|--------|-----|------|" >> $env:GITHUB_STEP_SUMMARY
            foreach ($row in $packageBreakdown) {
                $moduleUrl = "https://sonarcloud.io/project/issues?id=$($row.Module)&resolved=false"
                $mBlocker  = "[${row.BLOCKER}](https://sonarcloud.io/project/issues?id=$($row.Module)&severities=BLOCKER&resolved=false)"
                $mHigh     = "[${row.HIGH}](https://sonarcloud.io/project/issues?id=$($row.Module)&severities=CRITICAL&resolved=false)"
                $mMedium   = "[${row.MEDIUM}](https://sonarcloud.io/project/issues?id=$($row.Module)&severities=MAJOR&resolved=false)"
                $mLow      = "[${row.LOW}](https://sonarcloud.io/project/issues?id=$($row.Module)&severities=MINOR&resolved=false)"
                $mInfo     = "[${row.INFO}](https://sonarcloud.io/project/issues?id=$($row.Module)&severities=INFO&resolved=false)"
                echo "| [$($row.Module)]($moduleUrl) | $mBlocker | $mHigh | $mMedium | $mLow | $mInfo |" >> $env:GITHUB_STEP_SUMMARY
              }
           }



          ############################################################
          # === Outputs for Email ===
          ############################################################
          "checkstyleCount=$checkstyleViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "pmdCount=$pmdViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "totalSonarFetchedIssues=$totalSonarFetchedIssues" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "coverageBar=$coverageBar" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarCoverage=$sonarCoverage%" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarBlocker=$blocker" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarBlockerURL=$($severityLinks.BLOCKER))" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarHigh=$high" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarHighURL=$($severityLinks.HIGH))" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarMedium=$medium" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarMediumURL=$($severityLinks.MEDIUM))" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarLow=$low" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarLowURL=$($severityLinks.LOW))" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarInfo=$info" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarInfoURL=$($severityLinks.INFO))" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarOverallCodeDashBoardURL=$sonarOverallCodeDashBoardUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarOpenIssuesDashboardURL=$sonarOpenIssuesDashboardUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append


      ##########################
      # FULL CLEANUP
      ##########################

      - name: ?? Full Cleanup
        shell: cmd
        run: |
          echo Cleaning up temp artifacts
          rmdir /s /q out >nul 2>&1
          rmdir /s /q logs >nul 2>&1
          rmdir /s /q reports >nul 2>&1
          del /q sources_*.txt >nul 2>&1
          echo ? Cleanup done 

      ###################################################################
      # CLEANUP VERIFICATION using (dir /s /b this is disabled for now)
      ##################################################################
      - name: ?? List Remaining Files
        shell: cmd
        run: |
          echo === POST-CLEANUP DIRECTORY TREE ===
          echo Hello, world!

      ###################################################################
      # DEMONSTRATES, FLAG BASED EXECUTION
      ##################################################################

      - name: ??? Say Hello (unless skipped)
        if: env.SKIP_ECHO != 'true'
        run: echo Hello, world!
        shell: cmd

      ###############################
      # Calculate Execution Metrics
      ##############################

      - name: ?? Calculate Duration and Export Timing
        id: calculate-duration-and-export-timing
        shell: pwsh
        env:
          START_EPOCH: ${{ steps.start_time.outputs.startTime }}
        run: |
          $startEpoch = [int]$env:START_EPOCH
          $endEpoch = [int][double]::Parse((Get-Date -UFormat %s))
          
          $startDT = [System.DateTimeOffset]::FromUnixTimeSeconds($startEpoch).ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
          $endDT = [System.DateTimeOffset]::FromUnixTimeSeconds($endEpoch).ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
          
          $durationSec = $endEpoch - $startEpoch
          $mins = [math]::Floor($durationSec / 60)
          $secs = $durationSec % 60
          $durationFormatted = "{0}m {1}s" -f $mins, $secs
          
          echo "startTime=$startDT" >> $env:GITHUB_OUTPUT
          echo "endTime=$endDT" >> $env:GITHUB_OUTPUT
          echo "formattedDuration=$durationFormatted" >> $env:GITHUB_OUTPUT


      ##########################
      # Email Success Summary
      ##########################

      - name: 📧 Email Summary
        uses: dawidd6/action-send-mail@v3
        env:
          CHECKSTYLE_VIOLATIONS: ${{ steps.metrics.outputs.checkstyleCount }}
          PMD_VIOLATIONS: ${{ steps.metrics.outputs.pmdCount }}
          JACOCO_COVERAGE_PERCENT: ${{ steps.metrics.outputs.jacocoPercent }}
          SONARCLOUD_DASHBOARD_URL: ${{ steps.metrics.outputs.sonarOverallCodeDashBoardURL }}
          SONARCLOUD_ISSUE_BREAKDOWN_URL: ${{ steps.metrics.outputs.sonarOpenIssuesDashboardURL }}
          SHORT_SHA: ${{ steps.commit_info.outputs.SHORT_SHA }}
          COMMIT_MSG: ${{ steps.commit_info.outputs.COMMIT_MSG }}
          COMMIT_AUTHOR: ${{ steps.commit_info.outputs.COMMIT_AUTHOR }}
          COMMIT_DATE: ${{ steps.commit_info.outputs.COMMIT_DATE }}
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: >-
            ${{ job.status == 'success' && '✅ SUCCESS' || '❌ FAILURE' }} 
            | Java MasterClass Hygiene Check for ${{ github.repository }} (main)
            ${{ steps.metrics.outputs.sonarCoverage && steps.metrics.outputs.sonarCoverage < 5 && '(⚠️ Coverage Below Threshold)' || '' }}

          to: hemantbellanilearns77@gmail.com
          from: GitHub Hygiene Bot <hemantbellanilearns77@gmail.com>
          html_body: |
            <p>Hi Hemant,</p>
            <p>✅ A GitHub Hygiene Check (CheckStyle, PMD, JaCoCo, SonarCloud) was completed on <strong>${{ github.repository }}</strong> (branch: <code>main</code>).</p>
            
            <p>📊 <strong>Hygiene Summary:</strong></p>
            <ul>
              <li>📝 Checkstyle Violations: <strong>${{ steps.metrics.outputs.checkstyleCount }}</strong></li>
              <li>🔍 PMD Violations: <strong>${{ steps.metrics.outputs.pmdCount }}</strong></li>
              <li>📈 Code Coverage: <strong>${{ steps.metrics.outputs.sonarCoverage }}</strong></li>
              <li>🎯 Coverage Visual: <code>${{ steps.metrics.outputs.coverageBar }}</code></li>
              <li>🗂 SonarCloud Total Issues: <strong>${{ steps.metrics.outputs.totalSonarFetchedIssues }}</strong></li>
              <li>🌐 <a href="${{ steps.metrics.outputs.sonarOverallCodeDashBoardURL }}">View SonarCloud Overall Code Dashboard</a></li>
            </ul>
            
            
            <p>🛠 <strong>SonarCloud Severity Breakdown:</strong></p>
            <ul>
              <li>🟥 <strong>BLOCKER: <a href="${{ steps.metrics.outputs.sonarBlockerUrl }}">${{ steps.metrics.outputs.sonarBlocker }}</a></strong></li>
              <li>🟧 <strong>HIGH: <a href="${{ steps.metrics.outputs.sonarHighUrl }}">${{ steps.metrics.outputs.sonarHigh }}</a></strong></li>
              <li>🟨 <strong>MEDIUM: <a href="${{ steps.metrics.outputs.sonarMediumUrl }}">${{ steps.metrics.outputs.sonarMedium }}</a></strong></li>
              <li>🟦 <strong>LOW: <a href="${{ steps.metrics.outputs.sonarLowUrl }}">${{ steps.metrics.outputs.sonarLow }}</a></strong></li>
              <li>ℹ️<strong>INFO: <a href="${{ steps.metrics.outputs.sonarInfoUrl }}">${{ steps.metrics.outputs.sonarInfo }}</a></strong></li>
              <li>🌐 <a href="${{ steps.metrics.outputs.sonarOpenIssuesDashboardURL }}">View SonarCloud Open Issues Breakdown Dashboard</a></li>
            </ul>
            
            <p>📦 <strong>Artifacts:</strong> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">Download from workflow run</a></p>
            <p>📜 <strong>Last Commit Info:</strong></p>
            <ul>
              <li><strong>SHA:</strong> <a href="https://github.com/${{ github.repository }}/commit/${{ steps.commit_info.outputs.FULL_SHA }}"><code>${{ steps.commit_info.outputs.SHORT_SHA }}</code></a></li>
              <li><strong>Message:</strong> <em>${{ steps.commit_info.outputs.COMMIT_MSG }}</em></li>
              <li><strong>Author:</strong> ${{ steps.commit_info.outputs.COMMIT_AUTHOR }}</li>
              <li><strong>Date:</strong> ${{ steps.commit_info.outputs.COMMIT_DATE }} <span style="color:gray;">(${{ steps.commit_info.outputs.COMMIT_AGO }})</span></li>
              <li><strong>🌐 View Commit on GitHub:</strong> <a href="https://github.com/${{ github.repository }}/commit/${{ steps.commit_info.outputs.FULL_SHA }}">Open Commit</a></li>
              <li><strong>🌐 View Commit:</strong>
                  <a href="https://github.com/${{ github.repository }}/commit/${{ steps.commit_info.outputs.FULL_SHA }}">Open on GitHub</a>
              </li>
            </ul>
            <p>⏱ <strong>Job Execution:</strong></p>
             <ul>
                <li><strong>Start Time:</strong> ${{ steps.calculate-duration-and-export-timing.outputs.startTime }}</li>
                <li><strong>End Time:</strong> ${{ steps.calculate-duration-and-export-timing.outputs.endTime }}</li>
                <li><strong>Job Duration:</strong> ${{ steps.calculate-duration-and-export-timing.outputs.formattedDuration }}</li>
              </ul>
            <hr>
            <p><em>🤖 This is an automated message from a GitHub Actions workflow.<br>
            Please do not reply.</em></p>

