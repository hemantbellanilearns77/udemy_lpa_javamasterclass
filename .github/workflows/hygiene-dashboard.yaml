name: Hygiene Checks

on:
  push:
    branches: [main]

jobs:
  hygiene-checks:
    name: Run Checkstyle + PMD + JaCoCo + SonarCloud
    runs-on: windows-latest
    env:
      JACOCO_MIN_COVERAGE: 0.1
      CHECKSTYLE_PMD_MAX_TOTAL_VIOLATIONS: 50

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 24

      # Tools: Checkstyle, PMD, JaCoCo
      - name: 📦 Download Tools
        run: |
          mkdir tools\checkstyle
          curl -L -o tools\checkstyle\checkstyle-10.26.1-all.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.26.1/checkstyle-10.26.1-all.jar
          curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.15.0/pmd-dist-7.15.0-bin.zip
          powershell -Command "Expand-Archive -Path 'pmd.zip' -DestinationPath 'tools\pmd'"
          mkdir tools\jacoco-0.8.13\lib
          curl -L -o tools\jacoco-0.8.13\lib\jacocoagent.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.13/org.jacoco.agent-0.8.13-runtime.jar
          curl -L -o tools\jacoco-0.8.13\lib\jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.13/org.jacoco.cli-0.8.13-nodeps.jar
          mkdir tools\junit-console
          curl -L -o tools\junit-console\junit-platform-console-standalone-1.13.0.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.13.0/junit-platform-console-standalone-1.13.0.jar
        shell: cmd

      # Run Static Analysis
      - name: 🧼 Run Checkstyle
        run: scripts\run-checkstyle.bat

      - name: 🧼 Run PMD
        run: scripts\run-pmd.bat
        shell: cmd

      # Compile and Run JaCoCo
      - name: 🛠️ Compile Java Modules if Needed
        shell: cmd
        run: |
          set "JAVA_HOME=%JAVA_HOME%"
          set "OUT_PROD=out\production"
          set "OUT_TEST=out\test"
          set "SRC_MAIN=src\main\java"
          set "SRC_MISC=misc_utils\src\main\java"
          set "TEST_MAIN=src\test\java"
          set "TEST_MISC=misc_utils\src\test\java"
          set "JUNIT_JAR=tools\junit-console\junit-platform-console-standalone-1.13.0.jar"
          if not exist "%OUT_PROD%\udemy_lpa_javamasterclass" (
            if not exist "%OUT_PROD%\misc_utils" (
              rmdir /s /q "%OUT_PROD%" >nul 2>&1
              rmdir /s /q "%OUT_TEST%" >nul 2>&1
              mkdir "%OUT_PROD%\udemy_lpa_javamasterclass"
              mkdir "%OUT_PROD%\misc_utils"
              mkdir "%OUT_TEST%\udemy_lpa_javamasterclass"
              mkdir "%OUT_TEST%\misc_utils"
              dir /s /b "%SRC_MAIN%\*.java" > sources_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -d "%OUT_PROD%\udemy_lpa_javamasterclass" @sources_main.txt
              dir /s /b "%SRC_MISC%\*.java" > sources_misc.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass" -d "%OUT_PROD%\misc_utils" @sources_misc.txt
              dir /s /b "%TEST_MAIN%\*.java" > sources_test_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\udemy_lpa_javamasterclass" @sources_test_main.txt
              if exist "%TEST_MISC%" (
                dir /s /b "%TEST_MISC%\*.java" > sources_test_misc.txt
                javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\misc_utils" @sources_test_misc.txt
              )
            )
          )

      - name: 🧪 Run JaCoCo Coverage
        run: scripts\run-coverage-analysis.bat
        shell: cmd

      # Upload Reports
      - name: ⬆️ Upload All Reports
        uses: actions/upload-artifact@v4
        with:
          name: hygiene-reports
          path: |
            reports/**
            logs/**

      # Run SonarCloud Analysis
      - name: 🔎 Run SonarCloud Scan
        if: success()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner -X ^
            -Dsonar.projectKey=hemantbellanilearns77_udemy_lpa_javamasterclass ^
            -Dsonar.organization=hemantbellanilearns77 ^
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} ^
            -Dsonar.sources=src/main/java,misc_utils/src/main/java ^
            -Dsonar.tests=src/test/java ^
            -Dsonar.java.binaries=out/production/udemy_lpa_javamasterclass,out/production/misc_utils ^
            -Dsonar.java.libraries=out/production/udemy_lpa_javamasterclass,out/production/misc_utils ^
            -Dsonar.java.test.binaries=out/test/udemy_lpa_javamasterclass ^
            -Dsonar.java.test.libraries=out/test/udemy_lpa_javamasterclass ^
            -Dsonar.java.coveragePlugin=jacoco ^
            -Dsonar.junit.reportPaths=reports/junit/latest ^
            -Dsonar.coverage.jacoco.xmlReportPaths=reports/jacoco/jacoco-latest.xml ^
            -Dsonar.jacoco.reportPaths=reports/jacoco/jacoco-latest.exec ^
            -Dsonar.sonar.java.checkstyle.reportPaths=reports/checkstyle/checkstyle-*.txt ^
            -Dsonar.java.pmd.reportPaths=reports/pmd/pmd-*.xml
          

      # Summary Section
      - name: 📊 Add Hygiene Summary
        shell: pwsh
        run: |
          $xml = Select-Xml -Path reports\jacoco\jacoco-latest.xml -XPath "//report/counter[@type='INSTRUCTION']"
          $missed = [int]$xml.Node.missed
          $covered = [int]$xml.Node.covered
          $total = $missed + $covered
          $jacocoCoverage = if ($total -gt 0) { [math]::Round(100 * $covered / $total, 2) } else { 0 }

          $checkstyleViolations = 0
          if (Test-Path "reports/checkstyle") {
            Get-ChildItem reports/checkstyle/*.txt | ForEach-Object {
              $checkstyleViolations += (Get-Content $_ | Where-Object { $_.Trim() -ne "" }).Count
            }
          }

          $pmdViolations = 0
          if (Test-Path "reports/pmd") {
            Get-ChildItem reports/pmd/*.txt | ForEach-Object {
              $pmdViolations += (Get-Content $_ | Where-Object { $_ -match "^[A-Za-z]:\\" }).Count
            }
          }

          $totalViolations = $checkstyleViolations + $pmdViolations

          echo "### 🧪 Hygiene Summary (Checkstyle + PMD + JaCoCo)" >> $env:GITHUB_STEP_SUMMARY
          echo "| Metric       | Value        |" >> $env:GITHUB_STEP_SUMMARY
          echo "|--------------|--------------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| Checkstyle   | $checkstyleViolations     |" >> $env:GITHUB_STEP_SUMMARY
          echo "| PMD          | $pmdViolations     |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Violations   | $totalViolations     |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Coverage     | $jacocoCoverage%   |" >> $env:GITHUB_STEP_SUMMARY
          echo "**🌀 SonarCloud scan has completed.**" >> $env:GITHUB_STEP_SUMMARY

      # Final Cleanup
      - name: 🧹 Full Cleanup
        shell: cmd
        run: |
          echo Cleaning up temp artifacts
          rmdir /s /q out >nul 2>&1
          rmdir /s /q logs >nul 2>&1
          rmdir /s /q reports >nul 2>&1
          del /q sources_*.txt >nul 2>&1
          echo ✅ Cleanup done
