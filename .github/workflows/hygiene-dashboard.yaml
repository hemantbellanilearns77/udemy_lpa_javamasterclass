name: Hygiene Checks Pipeline

on:
  push:
    branches: [ main ]

jobs:
  hygiene-checks:
    name: Hygiene Checks - Checkstyle + PMD + JaCoCo + Sonar
    runs-on: windows-latest
    env:
      JACOCO_MIN_COVERAGE: 0.05
      CHECKSTYLE_PMD_MAX_TOTAL_VIOLATIONS: 50
      CHECKSTYLE_MAX_VIOLATIONS: 16000
      PMD_MAX_VIOLATIONS: 63
      SONAR_ORG: ${{ vars.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
      SKIP_ECHO: true

    steps:

      - name: ‚è±Ô∏è Capture Job Start Time
        id: start_time
        shell: bash
        run: echo "startTime=$(date +%s)" >> $GITHUB_OUTPUT

      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Setup JDK 24 (for JaCoCo + Compilation)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 24

      ##########################
      # DOWNLOAD TOOLS
      ##########################

      - name: üì¶ Download Checkstyle
        run: |
          mkdir tools\checkstyle
          curl -L -o tools\checkstyle\checkstyle-10.26.1-all.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.26.1/checkstyle-10.26.1-all.jar

      - name: üì¶ Download and Extract PMD
        run: curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.15.0/pmd-dist-7.15.0-bin.zip
        shell: bash

      - name: üì¶ Extract PMD
        run: |
          mkdir tools\pmd
          powershell -Command "Expand-Archive -Path 'pmd.zip' -DestinationPath 'tools\pmd'"
        shell: cmd

      - name: üì¶ Download JaCoCo + JUnit Console
        run: |
          mkdir tools\jacoco-0.8.13\lib
          curl -L -o tools\jacoco-0.8.13\lib\jacocoagent.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.13/org.jacoco.agent-0.8.13-runtime.jar
          curl -L -o tools\jacoco-0.8.13\lib\jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.13/org.jacoco.cli-0.8.13-nodeps.jar
          mkdir tools\junit-console
          curl -L -o tools\junit-console\junit-platform-console-standalone-1.13.0.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.13.0/junit-platform-console-standalone-1.13.0.jar
        shell: cmd

      ##########################
      # RUN STATIC ANALYSIS
      ##########################

      - name: üßº Run Checkstyle
        run: scripts\run-checkstyle.bat

      - name: üßº Run PMD
        run: scripts\run-pmd.bat
        shell: cmd

      ##########################
      # COMPILE + JACOCO
      ##########################

      - name: üõ†Ô∏è Compile Java Modules if Needed
        shell: cmd
        run: |
          set "JAVA_HOME=%JAVA_HOME%"
          set "OUT_PROD=out\production"
          set "OUT_TEST=out\test"
          set "SRC_MAIN=src\main\java"
          set "SRC_MISC=misc_utils\src\main\java"
          set "TEST_MAIN=src\test\java"
          set "TEST_MISC=misc_utils\src\test\java"
          set "JUNIT_JAR=tools\junit-console\junit-platform-console-standalone-1.13.0.jar"

          if not exist "%OUT_PROD%\udemy_lpa_javamasterclass" (
            if not exist "%OUT_PROD%\misc_utils" (
              echo ‚öô Compilation triggered

              rmdir /s /q "%OUT_PROD%" >nul 2>&1
              rmdir /s /q "%OUT_TEST%" >nul 2>&1

              mkdir "%OUT_PROD%\udemy_lpa_javamasterclass"
              mkdir "%OUT_PROD%\misc_utils"
              mkdir "%OUT_TEST%\udemy_lpa_javamasterclass"
              mkdir "%OUT_TEST%\misc_utils"

              echo ‚úç Compiling udemy_lpa_javamasterclass
              dir /s /b "%SRC_MAIN%\*.java" > sources_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -d "%OUT_PROD%\udemy_lpa_javamasterclass" @sources_main.txt

              echo ‚úç Compiling misc_utils
              dir /s /b "%SRC_MISC%\*.java" > sources_misc.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass" -d "%OUT_PROD%\misc_utils" @sources_misc.txt

              echo ‚úç Compiling tests (masterclass)
              dir /s /b "%TEST_MAIN%\*.java" > sources_test_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\udemy_lpa_javamasterclass" @sources_test_main.txt

              echo ‚úç Compiling tests (misc_utils)
              if exist "%TEST_MISC%" (
                dir /s /b "%TEST_MISC%\*.java" > sources_test_misc.txt
                javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\misc_utils" @sources_test_misc.txt
              )

              del sources_main.txt sources_misc.txt sources_test_main.txt sources_test_misc.txt
            )
          )

      - name: üß™ Run JaCoCo Coverage
        run: scripts\run-coverage-analysis.bat
        shell: cmd

      ##########################
      # UPLOAD REPORTS
      ##########################

      - name: ‚¨ÜÔ∏è Upload All Reports
        uses: actions/upload-artifact@v4
        with:
          name: hygiene-reports
          path: |
            reports/**
            logs/**

      ##########################
      # DOWNLOAD SONAR-SCANNER
      ##########################

      - name: üì¶ Download and Setup SonarScanner 7.1.0.4889
        shell: bash
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.1.0.4889-windows-x64.zip
          mkdir tools/sonar-scanner
          unzip sonar-scanner.zip -d tools/sonar-scanner
          echo "SONAR_SCANNER_HOME=$PWD/tools/sonar-scanner-7.1.0.4889-windows" >> $GITHUB_ENV
          echo "$PWD/tools/sonar-scanner/sonar-scanner-7.1.0.4889-windows/bin" >> $GITHUB_PATH

        ################################
        # RUN SONAR CLOUD ANALYSIS
      ################################
      - name: üîé Run SonarCloud Scan (via batch)
        if: success()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: scripts\run-sonar-scan-admin.bat
        shell: cmd

      ##########################
      # FETCH SONARCLOUD INFO
      ##########################

      - name: üß† Fetch SonarCloud Issue Count (OPEN)
        id: sonar_issues
        shell: pwsh
        run: |
          # Confirm if token is passed
          if (-not $env:SONAR_TOKEN) {
            Write-Error "‚ùå SONAR_TOKEN is empty!"
            exit 1
          }

          # Encode token correctly (with colon!)
          $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$env:SONAR_TOKEN:"))
          Write-Host "üîê Encoded Auth: $encodedAuth"

          $headers = @{ Authorization = "Basic $encodedAuth" }
          $url = "https://sonarcloud.io/api/issues/search?issueStatuses=OPEN&ps=1&organization=hemantbellanilearns77&componentKeys=hemantbellanilearns77_udemy_lpa_javamasterclass"

          Write-Host "üì° Calling SonarCloud API: $url"

          try {
            $response = Invoke-WebRequest -Uri $url -Method Get
            $body = $response.Content

            if ($body -match '"total"\s*:\s*(\d+)') {
              $totalIssues = $matches[1]
              Write-Host "‚úÖ Total SonarCloud Issues (OPEN): $totalIssues"
              "sonarIssueCount=$totalIssues" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            } else {
              Write-Error "‚ùå Could not extract issue count from response body: $body"
              exit 1
            }
          } catch {
            Write-Error "‚ùå API call failed: $_"
            exit 1
          }
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      ##########################
      # SUMMARY SECTION
      ##########################

      - name: üìä Add Hygiene Summary (Checkstyle + PMD + JaCoCo + Sonar Issues)
        id: metrics
        shell: pwsh
        run: |
          # Parse JaCoCo XML
          $xml = Select-Xml -Path reports\jacoco\jacoco-latest.xml -XPath "//report/counter[@type='INSTRUCTION']"
          $missed = [int]$xml.Node.missed
          $covered = [int]$xml.Node.covered
          $total = $missed + $covered
          if ($total -gt 0) {
          $jacocoCoverage = [math]::Round(100 * $covered / $total, 2)
          } else {
          $jacocoCoverage = 0
          }
          
          # ASCII Coverage Bar
          function Get-AsciiBar($percent) {
          $blocks = 20
          $filled = [math]::Round($blocks * $percent / 100)
          $empty = $blocks - $filled
          return ('‚ñà' * $filled) + ('‚ñë' * $empty)
          }
          
          # Sparkline-styled emoji indicator
          if ($jacocoCoverage -ge 50) {
          $coverageEmoji = "üü¢"
          } elseif ($jacocoCoverage -ge 20) {
          $coverageEmoji = "üü°"
          } else {
          $coverageEmoji = "üî¥"
          }
          
          $coverageBar = Get-AsciiBar $jacocoCoverage
          
          # Parse Checkstyle
          $checkstyleViolations = 0
          if (Test-Path "reports/checkstyle") {
          Get-ChildItem reports/checkstyle/*.txt | ForEach-Object {
          $checkstyleViolations += (Get-Content $_ | Where-Object { $_.Trim() -ne "" }).Count
          }
          }
          
          # Parse PMD
          $pmdViolations = 0
          if (Test-Path "reports/pmd") {
          Get-ChildItem reports/pmd/*.txt | ForEach-Object {
          $pmdViolations += (Get-Content $_ | Where-Object { $_ -match "^[A-Za-z]:\\" }).Count
          }
          }
          
          $totalViolations = $checkstyleViolations + $pmdViolations
          
          # Fetch Sonar severity breakdown
          $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ secrets.SONAR_TOKEN }}:"))
          $headers = @{ Authorization = "Basic $encodedAuth" }
          
          function Fetch-SonarSeverity($severity) {
          $url = "https://sonarcloud.io/api/issues/search?severities=$severity&issueStatuses=OPEN&ps=1&organization=$env:SONAR_ORG&componentKeys=$env:SONAR_PROJECT_KEY"
          try {
          $resp = Invoke-WebRequest -Uri $url -Headers $headers -Method Get
          if ($resp.Content -match '"total"\s*:\s*(\d+)') {
          return $matches[1]
          } else {
          return "0"
          }
          } catch {
          return "?"
          }
          }
          
          $blocker = Fetch-SonarSeverity "BLOCKER"
          $critical = Fetch-SonarSeverity "CRITICAL"
          $major = Fetch-SonarSeverity "MAJOR"
          $minor = Fetch-SonarSeverity "MINOR"
          $info = Fetch-SonarSeverity "INFO"
          
          
          
          # === Writing table ===
          echo "### üß™ Hygiene Summary (Checkstyle + PMD + JaCoCo)" >> $env:GITHUB_STEP_SUMMARY
          echo "| **Metric**                     | **Value**        |" >> $env:GITHUB_STEP_SUMMARY
          echo "|-------------------------------|------------------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| Checkstyle Violations         | $checkstyleViolations |" >> $env:GITHUB_STEP_SUMMARY
          echo "| PMD Violations                | $pmdViolations        |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Total Static Violations       | $totalViolations      |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Code Coverage %               | $jacocoCoverage% $coverageEmoji |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Coverage Visual               | <code>$coverageBar</code> |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Sonar Issues (Total)          | ${{ steps.sonar_issues.outputs.sonarIssueCount }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| üî¥ BLOCKER                    | $blocker            |" >> $env:GITHUB_STEP_SUMMARY
          echo "| üü† CRITICAL                   | $critical           |" >> $env:GITHUB_STEP_SUMMARY
          echo "| üü° MAJOR                      | $major              |" >> $env:GITHUB_STEP_SUMMARY
          echo "| üîµ MINOR                      | $minor              |" >> $env:GITHUB_STEP_SUMMARY
          echo "| ‚ö™ INFO                       | $info               |" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          
          # === SonarCloud Dashboard Link ===
          $projectKey = $env:SONAR_PROJECT_KEY
          $branch = "${{ github.ref_name }}"
          $sonarOverallCodeDashBoardUrl = "https://sonarcloud.io/summary/overall?id=$projectKey&branch=$branch"
          echo "üîó [View SonarCloud Overall Code Dashboard]($sonarOverallCodeDashBoardUrl)" >> $env:GITHUB_STEP_SUMMARY
          $sonarOpenIssuesDashboardUrl= "https://sonarcloud.io/project/issues?issueStatuses=OPEN%2CCONFIRMED&id=$projectKey"
          echo "üîó [View SonarCloud Issues Breakdown Dashboard]($sonarOpenIssuesDashboardUrl)" >> $env:GITHUB_STEP_SUMMARY
          
          # === Output variables ===                    
          
          "checkstyleCount=$checkstyleViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "pmdCount=$pmdViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "jacocoPercent=$jacocoCoverage%" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "coverageBar=$coverageBar" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarBlocker=$blocker" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarCritical=$critical" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarMajor=$major" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarMinor=$minor" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarInfo=$info" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarOverallCodeDashBoardURL=$sonarOverallCodeDashBoardUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarOpenIssuesDashboardURL=$sonarOpenIssuesDashboardUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      ##########################
      # FULL CLEANUP
      ##########################

      - name: üßπ Full Cleanup
        shell: cmd
        run: |
          echo Cleaning up temp artifacts
          rmdir /s /q out >nul 2>&1
          rmdir /s /q logs >nul 2>&1
          rmdir /s /q reports >nul 2>&1
          del /q sources_*.txt >nul 2>&1
          echo ‚úÖ Cleanup done 

      ###################################################################
      # CLEANUP VERIFICATION using (dir /s /b this is disabled for now)
      ##################################################################
      - name: üìÇ List Remaining Files
        shell: cmd
        run: |
          echo === POST-CLEANUP DIRECTORY TREE ===
          echo Hello, world!

      ###################################################################
      # DEMONSTRATES, FLAG BASED EXECUTION
      ##################################################################

      - name: üó£Ô∏è Say Hello (unless skipped)
        if: env.SKIP_ECHO != 'true'
        run: echo Hello, world!
        shell: cmd

      ##########################
      # EXTRACT COMMIT STATS
      ##########################

      - name: üì¶ Extract Commit Info (Windows PowerShell)
        id: commit_info
        shell: pwsh
        run: |
          $shortSha = git rev-parse --short HEAD
          $fullSha = git rev-parse HEAD
          $msg = git log -1 --pretty=%s
          $author = git log -1 --pretty='%an'
          $date = git log -1 --date=iso-local --pretty='%cd'

          $commitTs = git log -1 --pretty=%ct
          $nowTs = [int][double]::Parse((Get-Date -UFormat %s))
          $deltaMin = [math]::Floor(($nowTs - $commitTs) / 60)

          if ($deltaMin -lt 1) {
            $ago = "Just now"
          } elseif ($deltaMin -eq 1) {
            $ago = "1 minute ago"
          } else {
            $ago = "$deltaMin minutes ago"
          }

          "SHORT_SHA=$shortSha" >> $env:GITHUB_OUTPUT
          "FULL_SHA=$fullSha" >> $env:GITHUB_OUTPUT
          "COMMIT_MSG=$msg" >> $env:GITHUB_OUTPUT
          "COMMIT_AUTHOR=$author" >> $env:GITHUB_OUTPUT
          "COMMIT_DATE=$date" >> $env:GITHUB_OUTPUT
          "COMMIT_AGO=$ago" >> $env:GITHUB_OUTPUT

      ###############################
      # Calculate Execution Metrics
      ##############################

      - name: ‚è±Ô∏è Calculate Duration and Export Timing
        id: calculate-duration-and-export-timing
        shell: pwsh
        env:
          START_EPOCH: ${{ steps.start_time.outputs.startTime }}
        run: |
          $startEpoch = [int]$env:START_EPOCH
          $endEpoch = [int][double]::Parse((Get-Date -UFormat %s))
          
          $startDT = [System.DateTimeOffset]::FromUnixTimeSeconds($startEpoch).ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
          $endDT = [System.DateTimeOffset]::FromUnixTimeSeconds($endEpoch).ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
          
          $durationSec = $endEpoch - $startEpoch
          $mins = [math]::Floor($durationSec / 60)
          $secs = $durationSec % 60
          $durationFormatted = "{0}m {1}s" -f $mins, $secs
          
          echo "startTime=$startDT" >> $env:GITHUB_OUTPUT
          echo "endTime=$endDT" >> $env:GITHUB_OUTPUT
          echo "formattedDuration=$durationFormatted" >> $env:GITHUB_OUTPUT


      ##########################
      # Email Success Summary
      ##########################

      - name: üì¨ Email Summary
        uses: dawidd6/action-send-mail@v3
        env:
          CHECKSTYLE_VIOLATIONS: ${{ steps.metrics.outputs.checkstyleCount }}
          PMD_VIOLATIONS: ${{ steps.metrics.outputs.pmdCount }}
          JACOCO_COVERAGE_PERCENT: ${{ steps.metrics.outputs.jacocoPercent }}
          SONARCLOUD_DASHBOARD_URL: ${{ steps.metrics.outputs.sonarOverallCodeDashBoardURL }}
          SONARCLOUD_ISSUE_BREAKDOWN_URL: ${{ steps.metrics.outputs.sonarOpenIssuesDashboardURL }}
          SHORT_SHA: ${{ steps.commit_info.outputs.SHORT_SHA }}
          COMMIT_MSG: ${{ steps.commit_info.outputs.COMMIT_MSG }}
          COMMIT_AUTHOR: ${{ steps.commit_info.outputs.COMMIT_AUTHOR }}
          COMMIT_DATE: ${{ steps.commit_info.outputs.COMMIT_DATE }}
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: >-
            ${{ job.status == 'success' && '‚úÖ SUCCESS' || '‚ùå FAILURE' }} ‚Äî
            Java MasterClass Hygiene Check for ${{ github.repository }} (main)
            ${{ steps.metrics.outputs.jacocoPercent && steps.metrics.outputs.jacocoPercent < '5' && '(‚ö†Ô∏è Coverage Below Threshold)' || '' }}

          to: hemantbellanilearns77@gmail.com
          from: GitHub Hygiene Bot <hemantbellanilearns77@gmail.com>
          html_body: |
            <p>Hi Hemant,</p>
            <p>A GitHub Hygiene Check (CheckStyle, PMD, JaCoCo, SonarCloud) was completed on <strong>${{ github.repository }}</strong> (branch: <code>main</code>).</p>
            
            <p>üßº <strong>Hygiene Summary:</strong></p>
            <ul>
              <li>‚úÖ Checkstyle Violations: <strong>${{ steps.metrics.outputs.checkstyleCount }}</strong></li>
              <li>‚úÖ PMD Violations: <strong>${{ steps.metrics.outputs.pmdCount }}</strong></li>
              <li>üìä Code Coverage: <strong>${{ steps.metrics.outputs.jacocoPercent }}</strong></li>
              <li>üìâ Coverage Visual: <code>${{ steps.metrics.outputs.coverageBar }}</code></li>
              <li>üß† SonarCloud Total Issues: <strong>${{ steps.sonar_issues.outputs.sonarIssueCount }}</strong></li>
              <li>üîó <a href="${{ steps.metrics.outputs.sonarOverallCodeDashBoardURL }}">View SonarCloud Overall Code Dashboard</a></li>
            </ul>
            
            <p>üõë <strong>SonarCloud Severity Breakdown:</strong></p>
            <ul>
            <li>üî¥ BLOCKER: <strong>${{ steps.metrics.outputs.sonarBlocker }}</strong></li>
            <li>üü† CRITICAL: <strong>${{ steps.metrics.outputs.sonarCritical }}</strong></li>
            <li>üü° MAJOR: <strong>${{ steps.metrics.outputs.sonarMajor }}</strong></li>
            <li>üîµ MINOR: <strong>${{ steps.metrics.outputs.sonarMinor }}</strong></li>
            <li>‚ö™ INFO: <strong>${{ steps.metrics.outputs.sonarInfo }}</strong></li>
            <li>üîó <a href="${{ steps.metrics.outputs.sonarOpenIssuesDashboardURL }}">View SonarCloud Issues Breakdown</a></li>
            </ul>
            <p>üì¶ <strong>Artifacts:</strong> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">Download from workflow run</a></p>
            <p>üßë‚Äçüíª <strong>Last Commit Info:</strong></p>
            <ul>
              <li><strong>SHA:</strong> <a href="https://github.com/${{ github.repository }}/commit/${{ steps.commit_info.outputs.FULL_SHA }}"><code>${{ steps.commit_info.outputs.SHORT_SHA }}</code></a></li>
              <li><strong>Message:</strong> <em>${{ steps.commit_info.outputs.COMMIT_MSG }}</em></li>
              <li><strong>Author:</strong> ${{ steps.commit_info.outputs.COMMIT_AUTHOR }}</li>
              <li><strong>Date:</strong> ${{ steps.commit_info.outputs.COMMIT_DATE }} <span style="color:gray;">(${{ steps.commit_info.outputs.COMMIT_AGO }})</span></li>
              <li><strong>üîó View Commit on GitHub:</strong> <a href="https://github.com/${{ github.repository }}/commit/${{ steps.commit_info.outputs.FULL_SHA }}">Open Commit</a></li>
              <li><strong>üîó View Commit:</strong>
                  <a href="https://github.com/${{ github.repository }}/commit/${{ steps.commit_info.outputs.FULL_SHA }}">Open on GitHub</a>
              </li>
            </ul>
            <p><strong>üïí Job Execution:</strong></p>
             <ul>
                <li><strong>Start Time:</strong> ${{ steps.calculate-duration-and-export-timing.outputs.startTime }}</li>
                <li><strong>End Time:</strong> ${{ steps.calculate-duration-and-export-timing.outputs.endTime }}</li>
                <li><strong>Job Duration:</strong> ${{ steps.calculate-duration-and-export-timing.outputs.formattedDuration }}</li>
              </ul>
            <hr>
            <p><em>ü§ñ This is an automated message from a GitHub Actions workflow.<br>
            Please do not reply.</em></p> 

