name: Hygiene Checks Pipeline

on:
  push:
    branches: [ main ]

jobs:
  hygiene-checks:
    name: Hygiene Checks - Checkstyle + PMD + JaCoCo + Sonar
    runs-on: windows-latest
    env:
      JACOCO_MIN_COVERAGE: 0.05
      CHECKSTYLE_PMD_MAX_TOTAL_VIOLATIONS: 50
      CHECKSTYLE_MAX_VIOLATIONS: 16000
      PMD_MAX_VIOLATIONS: 63
      SONAR_ORG: ${{ vars.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
      SKIP_ECHO: true

    steps:
      - name: ⏱️ Capture Job Start Time
        id: start_time
        shell: bash
        run: echo "startTime=$(date +%s)" >> $GITHUB_OUTPUT

      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 24

      - name: 📦 Download Checkstyle
        run: |
          mkdir tools\checkstyle
          curl -L -o tools\checkstyle\checkstyle-10.26.1-all.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.26.1/checkstyle-10.26.1-all.jar

      - name: 📦 Download and Extract PMD
        run: curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.15.0/pmd-dist-7.15.0-bin.zip
        shell: bash

      - name: 📦 Extract PMD
        run: |
          mkdir tools\pmd
          powershell -Command "Expand-Archive -Path 'pmd.zip' -DestinationPath 'tools\pmd'"
        shell: cmd

      - name: 📦 Download JaCoCo + JUnit Console
        run: |
          mkdir tools\jacoco-0.8.13\lib
          curl -L -o tools\jacoco-0.8.13\lib\jacocoagent.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.13/org.jacoco.agent-0.8.13-runtime.jar
          curl -L -o tools\jacoco-0.8.13\lib\jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.13/org.jacoco.cli-0.8.13-nodeps.jar
          mkdir tools\junit-console
          curl -L -o tools\junit-console\junit-platform-console-standalone-1.13.0.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.13.0/junit-platform-console-standalone-1.13.0.jar
        shell: cmd

      - name: 🧼 Run Checkstyle
        run: scripts\run-checkstyle.bat

      - name: 🧼 Run PMD
        run: scripts\run-pmd.bat
        shell: cmd

      - name: 🛠️ Compile Java Modules if Needed
        shell: cmd
        run: |
          set "JAVA_HOME=%JAVA_HOME%"
          set "OUT_PROD=out\production"
          set "OUT_TEST=out\test"
          set "SRC_MAIN=src\main\java"
          set "SRC_MISC=misc_utils\src\main\java"
          set "TEST_MAIN=src\test\java"
          set "TEST_MISC=misc_utils\src\test\java"
          set "JUNIT_JAR=tools\junit-console\junit-platform-console-standalone-1.13.0.jar"

          if not exist "%OUT_PROD%\udemy_lpa_javamasterclass" (
            if not exist "%OUT_PROD%\misc_utils" (
              echo ⚙ Compilation triggered
              rmdir /s /q "%OUT_PROD%" >nul 2>&1
              rmdir /s /q "%OUT_TEST%" >nul 2>&1
              mkdir "%OUT_PROD%\udemy_lpa_javamasterclass"
              mkdir "%OUT_PROD%\misc_utils"
              mkdir "%OUT_TEST%\udemy_lpa_javamasterclass"
              mkdir "%OUT_TEST%\misc_utils"
              echo ✍ Compiling udemy_lpa_javamasterclass
              dir /s /b "%SRC_MAIN%\*.java" > sources_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -d "%OUT_PROD%\udemy_lpa_javamasterclass" @sources_main.txt
              echo ✍ Compiling misc_utils
              dir /s /b "%SRC_MISC%\*.java" > sources_misc.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass" -d "%OUT_PROD%\misc_utils" @sources_misc.txt
              echo ✍ Compiling tests (masterclass)
              dir /s /b "%TEST_MAIN%\*.java" > sources_test_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\udemy_lpa_javamasterclass" @sources_test_main.txt
              echo ✍ Compiling tests (misc_utils)
              if exist "%TEST_MISC%" (
                dir /s /b "%TEST_MISC%\*.java" > sources_test_misc.txt
                javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\misc_utils" @sources_test_misc.txt
              )
              del sources_main.txt sources_misc.txt sources_test_main.txt sources_test_misc.txt
            )
          )

      - name: 🧪 Run JaCoCo Coverage
        run: scripts\run-coverage-analysis.bat
        shell: cmd

      - name: ⬆️ Upload All Reports
        uses: actions/upload-artifact@v4
        with:
          name: hygiene-reports
          path: |
            reports/**
            logs/**

      - name: 📦 Download and Setup SonarScanner
        shell: bash
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.1.0.4889-windows-x64.zip
          mkdir tools/sonar-scanner
          unzip sonar-scanner.zip -d tools/sonar-scanner
          echo "SONAR_SCANNER_HOME=$PWD/tools/sonar-scanner-7.1.0.4889-windows" >> $GITHUB_ENV
          echo "$PWD/tools/sonar-scanner/sonar-scanner-7.1.0.4889-windows/bin" >> $GITHUB_PATH

      - name: 🔎 Run SonarCloud Scan
        if: success()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: scripts\run-sonar-scan-admin.bat
        shell: cmd

      - name: 🧠 Fetch SonarCloud Issue Count (OPEN)
        id: sonar_issues
        shell: pwsh
        run: |
          Start-Sleep -Seconds 15
          if (-not $env:SONAR_TOKEN) { Write-Error "❌ SONAR_TOKEN is empty!"; exit 1 }
          $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$env:SONAR_TOKEN:"))
          $headers = @{ Authorization = "Basic $encodedAuth" }
          $url = "https://sonarcloud.io/api/issues/search?issueStatuses=OPEN&ps=1&organization=$env:SONAR_ORG&componentKeys=$env:SONAR_PROJECT_KEY"
          $response = Invoke-WebRequest -Uri $url -Headers $headers -Method Get
          if ($response.Content -match '"total"\s*:\s*(\d+)') {
            "sonarIssueCount=$($matches[1])" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            Write-Error "❌ Could not extract issue count"; exit 1
          }
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 📊 Add Hygiene Summary (Module-wise)
        id: metrics
        shell: pwsh
        run: |
          function Get-AsciiBar($percent) {
            $blocks = 20
            $filled = [math]::Round($blocks * $percent / 100)
            return ('█' * $filled) + ('░' * ($blocks - $filled))
          }
          # Overall coverage
          $xml = Select-Xml -Path reports\jacoco\jacoco-latest.xml -XPath "//report/counter[@type='INSTRUCTION']"
          $missed = [int]$xml.Node.missed
          $covered = [int]$xml.Node.covered
          $total = $missed + $covered
          $jacocoCoverage = if ($total -gt 0) { [math]::Round(100 * $covered / $total, 2) } else { 0 }
          $coverageBar = Get-AsciiBar $jacocoCoverage
          $coverageEmoji = if ($jacocoCoverage -ge 50) { "🟢" } elseif ($jacocoCoverage -ge 20) { "🟡" } else { "🔴" }
          # Module-wise coverage
          $modules = @{}
          Get-ChildItem reports\jacoco -Filter "*-coverage.xml" | ForEach-Object {
            $name = $_.BaseName -replace "-coverage",""
            try {
              $xmlMod = Select-Xml -Path $_.FullName -XPath "//report/counter[@type='INSTRUCTION']"
              $mMiss = [int]$xmlMod.Node.missed
              $mCov = [int]$xmlMod.Node.covered
              $mTot = $mMiss + $mCov
              $mPerc = if ($mTot -gt 0) { [math]::Round(100 * $mCov / $mTot, 2) } else { 0 }
              $modules[$name] = @{
                percent = $mPerc
                bar = Get-AsciiBar $mPerc
              }
            } catch { $modules[$name] = @{ percent = 0; bar = Get-AsciiBar 0 } }
          }
          # Parse Checkstyle module-wise
          $checkstyleViolations = 0
          $checkstyleModules = @{}
          if (Test-Path "reports/checkstyle") {
            Get-ChildItem reports/checkstyle/*.txt | ForEach-Object {
              $count = (Get-Content $_ | Where-Object { $_.Trim() -ne "" }).Count
              $checkstyleViolations += $count
              $checkstyleModules[$_.BaseName] = $count
            }
          }
          # Parse PMD module-wise
          $pmdViolations = 0
          $pmdModules = @{}
          if (Test-Path "reports/pmd") {
            Get-ChildItem reports/pmd/*.txt | ForEach-Object {
              $count = (Get-Content $_ | Where-Object { $_ -match "^[A-Za-z]:\\" }).Count
              $pmdViolations += $count
              $pmdModules[$_.BaseName] = $count
            }
          }
          $totalViolations = $checkstyleViolations + $pmdViolations
          # Summary table
          echo "### 🧪 Hygiene Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $env:GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| Checkstyle Violations | $checkstyleViolations |" >> $env:GITHUB_STEP_SUMMARY
          echo "| PMD Violations | $pmdViolations |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Total Static Violations | $totalViolations |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Code Coverage % | $jacocoCoverage% $coverageEmoji |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Coverage Visual | <code>$coverageBar</code> |" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "#### 📦 Module-wise Coverage" >> $env:GITHUB_STEP_SUMMARY
          echo "| Module | Coverage % | Visual |" >> $env:GITHUB_STEP_SUMMARY
          echo "|--------|------------|--------|" >> $env:GITHUB_STEP_SUMMARY
          foreach ($mod in $modules.Keys) {
            echo "| $mod | $($modules[$mod].percent)% | <code>$($modules[$mod].bar)</code> |" >> $env:GITHUB_STEP_SUMMARY
          }
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "#### 📦 Module-wise Violations" >> $env:GITHUB_STEP_SUMMARY
          echo "| Module | Checkstyle | PMD |" >> $env:GITHUB_STEP_SUMMARY
          echo "|--------|------------|-----|" >> $env:GITHUB_STEP_SUMMARY
          foreach ($mod in ($checkstyleModules.Keys + $pmdModules.Keys | Sort-Object -Unique)) {
            $cs = if ($checkstyleModules.ContainsKey($mod)) { $checkstyleModules[$mod] } else { 0 }
            $pm = if ($pmdModules.ContainsKey($mod)) { $pmdModules[$mod] } else { 0 }
            echo "| $mod | $cs | $pm |" >> $env:GITHUB_STEP_SUMMARY
          }
          # Outputs for email
          "checkstyleCount=$checkstyleViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "pmdCount=$pmdViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "jacocoPercent=$jacocoCoverage%" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "coverageBar=$coverageBar" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "moduleData=$(ConvertTo-Json $modules -Compress)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "checkstyleModules=$(ConvertTo-Json $checkstyleModules -Compress)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "pmdModules=$(ConvertTo-Json $pmdModules -Compress)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: 📬 Email Summary
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "✅ SUCCESS — Hygiene Check (${{ github.repository }})"
          to: hemantbellanilearns77@gmail.com
          from: GitHub Hygiene Bot <hemantbellanilearns77@gmail.com>
          html_body: |
            <p>Hi Hemant,</p>
            <p>Hygiene check completed on <strong>${{ github.repository }}</strong>.</p>
            <ul>
              <li>Checkstyle Violations: <strong>${{ steps.metrics.outputs.checkstyleCount }}</strong></li>
              <li>PMD Violations: <strong>${{ steps.metrics.outputs.pmdCount }}</strong></li>
              <li>Coverage: <strong>${{ steps.metrics.outputs.jacocoPercent }}</strong> (<code>${{ steps.metrics.outputs.coverageBar }}</code>)</li>
            </ul>
            <h4>📦 Module-wise Coverage</h4>
            <table border="1" cellpadding="4" cellspacing="0">
              <tr><th>Module</th><th>Coverage %</th><th>Visual</th></tr>
              {% for mod, data in fromJson(steps.metrics.outputs.moduleData) %}
              <tr><td>{{ mod }}</td><td>{{ data.percent }}%</td><td><code>{{ data.bar }}</code></td></tr>
              {% endfor %}
            </table>
            <h4>📦 Module-wise Violations</h4>
            <table border="1" cellpadding="4" cellspacing="0">
              <tr><th>Module</th><th>Checkstyle</th><th>PMD</th></tr>
              {% for mod in fromJson(steps.metrics.outputs.checkstyleModules) %}
              <tr><td>{{ mod }}</td><td>{{ fromJson(steps.metrics.outputs.checkstyleModules)[mod] }}</td><td>{{ fromJson(steps.metrics.outputs.pmdModules)[mod] }}</td></tr>
              {% endfor %}
            </table>
