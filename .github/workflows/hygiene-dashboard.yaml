# Hygiene Checks Pipeline
name: Hygiene Checks Pipeline

on:
  push:
    branches: [ main ]

jobs:
  hygiene-checks:
    name: Hygiene Checks - Checkstyle + PMD + JaCoCo + Sonar
    runs-on: windows-latest
    env:
      JACOCO_MIN_COVERAGE: 0.05
      CHECKSTYLE_PMD_MAX_TOTAL_VIOLATIONS: 50
      CHECKSTYLE_MAX_VIOLATIONS: 16000
      PMD_MAX_VIOLATIONS: 63
      SONAR_ORG: ${{ vars.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
      MODULE_PATHS: "misc_utils/src/main/java/com/hb/study,src"
      SKIP_ECHO: true

    steps:
      - name: â±ï¸ Capture Job Start Time
        id: start_time
        shell: bash
        run: echo "startTime=$(date +%s)" >> $GITHUB_OUTPUT

      - name: ðŸ“¥ Checkout Code
        uses: actions/checkout@v4

      - name: â˜• Setup JDK 24 (for JaCoCo + Compilation)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 24

      ##########################
      # DOWNLOAD TOOLS
      ##########################
      - name: ðŸ“¦ Download Checkstyle
        run: |
          mkdir tools\checkstyle
          curl -L -o tools\checkstyle\checkstyle-10.26.1-all.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.26.1/checkstyle-10.26.1-all.jar

      - name: ðŸ“¦ Download and Extract PMD
        run: curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.15.0/pmd-dist-7.15.0-bin.zip
        shell: bash

      - name: ðŸ“¦ Extract PMD
        run: |
          mkdir tools\pmd
          powershell -Command "Expand-Archive -Path 'pmd.zip' -DestinationPath 'tools\pmd'"
        shell: cmd

      - name: ðŸ“¦ Download JaCoCo + JUnit Console
        run: |
          mkdir tools\jacoco-0.8.13\lib
          curl -L -o tools\jacoco-0.8.13\lib\jacocoagent.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.13/org.jacoco.agent-0.8.13-runtime.jar
          curl -L -o tools\jacoco-0.8.13\lib\jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.13/org.jacoco.cli-0.8.13-nodeps.jar
          mkdir tools\junit-console
          curl -L -o tools\junit-console\junit-platform-console-standalone-1.13.0.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.13.0/junit-platform-console-standalone-1.13.0.jar
        shell: cmd

      ##########################
      # RUN STATIC ANALYSIS
      ##########################
      - name: ðŸ§¼ Run Checkstyle
        run: scripts\run-checkstyle.bat

      - name: ðŸ§¼ Run PMD
        run: scripts\run-pmd.bat
        shell: cmd

      ##########################
      # COMPILE + JACOCO
      ##########################
      - name: ðŸ› ï¸ Compile Java Modules if Needed
        shell: cmd
        run: |
          set "JAVA_HOME=%JAVA_HOME%"
          set "OUT_PROD=out\production"
          set "OUT_TEST=out\test"
          set "SRC_MAIN=src\main\java"
          set "SRC_MISC=misc_utils\src\main\java"
          set "TEST_MAIN=src\test\java"
          set "TEST_MISC=misc_utils\src\test\java"
          set "JUNIT_JAR=tools\junit-console\junit-platform-console-standalone-1.13.0.jar"

          if not exist "%OUT_PROD%\udemy_lpa_javamasterclass" (
            if not exist "%OUT_PROD%\misc_utils" (
              echo âš™ Compilation triggered
              rmdir /s /q "%OUT_PROD%" >nul 2>&1
              rmdir /s /q "%OUT_TEST%" >nul 2>&1
              mkdir "%OUT_PROD%\udemy_lpa_javamasterclass"
              mkdir "%OUT_PROD%\misc_utils"
              mkdir "%OUT_TEST%\udemy_lpa_javamasterclass"
              mkdir "%OUT_TEST%\misc_utils"
              echo âœ Compiling udemy_lpa_javamasterclass
              dir /s /b "%SRC_MAIN%\*.java" > sources_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -d "%OUT_PROD%\udemy_lpa_javamasterclass" @sources_main.txt
              echo âœ Compiling misc_utils
              dir /s /b "%SRC_MISC%\*.java" > sources_misc.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass" -d "%OUT_PROD%\misc_utils" @sources_misc.txt
              echo âœ Compiling tests (masterclass)
              dir /s /b "%TEST_MAIN%\*.java" > sources_test_main.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\udemy_lpa_javamasterclass" @sources_test_main.txt
              echo âœ Compiling tests (misc_utils)
              if exist "%TEST_MISC%" (
                dir /s /b "%TEST_MISC%\*.java" > sources_test_misc.txt
                javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\misc_utils" @sources_test_misc.txt
              )
              del sources_main.txt sources_misc.txt sources_test_main.txt sources_test_misc.txt
            )
          )

      - name: ðŸ§ª Run JaCoCo Coverage
        run: scripts\run-coverage-analysis.bat
        shell: cmd

      ##########################
      # UPLOAD REPORTS
      ##########################
      - name: â¬†ï¸ Upload All Reports
        uses: actions/upload-artifact@v4
        with:
          name: hygiene-reports
          path: |
            reports/**
            logs/**

      ##########################
      # DOWNLOAD SONAR-SCANNER
      ##########################

      - name: ðŸ“¦ Download and Setup SonarScanner 7.1.0.4889
        shell: bash
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.1.0.4889-windows-x64.zip
          mkdir tools/sonar-scanner
          unzip sonar-scanner.zip -d tools/sonar-scanner
          echo "SONAR_SCANNER_HOME=$PWD/tools/sonar-scanner-7.1.0.4889-windows" >> $GITHUB_ENV
          echo "$PWD/tools/sonar-scanner/sonar-scanner-7.1.0.4889-windows/bin" >> $GITHUB_PATH

      ##########################
      # RUN SONAR CLOUD ANALYSIS
      ##########################
      - name: ?? Run SonarCloud Scan (via batch)
        if: success()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: scripts\run-sonar-scan-admin.bat
        shell: cmd

      ##########################
      # FETCH SONARCLOUD INFO
      ##########################
      - name: ?? Fetch SonarCloud Issue Count (OPEN)
        id: sonar_issues
        shell: pwsh
        run: |
          Start-Sleep -Seconds 15
          if (-not $env:SONAR_TOKEN) { Write-Error "? SONAR_TOKEN is empty!"; exit 1 }
          $url = "https://sonarcloud.io/api/issues/search?issueStatuses=OPEN&ps=1&organization=$env:SONAR_ORG&componentKeys=$env:SONAR_PROJECT_KEY"
          $response = Invoke-WebRequest -Uri $url -Method Get
          if ($response.Content -match '"total"\s*:\s*(\d+)') {
            "sonarIssueCount=$($matches[1])" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            Write-Error "? Could not extract total issues"; exit 1
          }
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      ##########################
      # SUMMARY SECTION
      ##########################
      - name: ?? Add Hygiene Summary (with Module Breakdown)
        id: metrics
        shell: pwsh
        run: |
          # Coverage parsing
          function Get-AsciiBar($percent) {
            $blocks = 20
            $filled = [math]::Round($blocks * $percent / 100)
            return ('¦' * $filled) + ('¦' * ($blocks - $filled))
          }
          $xml = Select-Xml -Path reports\jacoco\jacoco-latest.xml -XPath "//report/counter[@type='INSTRUCTION']"
          $missed = [int]$xml.Node.missed
          $covered = [int]$xml.Node.covered
          $jacocoCoverage = if (($missed+$covered) -gt 0) {[math]::Round(100*$covered/($missed+$covered),2)} else {0}
          $coverageEmoji = if ($jacocoCoverage -ge 50) {"??"} elseif ($jacocoCoverage -ge 20) {"??"} else {"??"}
          $coverageBar = Get-AsciiBar $jacocoCoverage

          # Checkstyle count
          $checkstyleViolations = (Get-ChildItem reports/checkstyle/*.txt | ForEach-Object { (Get-Content $_ | Where-Object { $_.Trim() -ne "" }).Count }) -join '+' | Invoke-Expression
          # PMD count
          $pmdViolations = (Get-ChildItem reports/pmd/*.txt | ForEach-Object { (Get-Content $_ | Where-Object { $_ -match "^[A-Za-z]:\\" }).Count }) -join '+' | Invoke-Expression
          $totalViolations = $checkstyleViolations + $pmdViolations

          # Module-wise static violations
          $modulePaths = $env:MODULE_PATHS -split ","
          $moduleStaticData = @()
          foreach ($mod in $modulePaths) {
            $csCount = (Select-String -Path "reports/checkstyle/*.txt" -Pattern $mod -SimpleMatch | Measure-Object).Count
            $pmdCount = (Select-String -Path "reports/pmd/*.txt" -Pattern $mod -SimpleMatch | Measure-Object).Count
            $moduleStaticData += [PSCustomObject]@{ Module=$mod; Checkstyle=$csCount; PMD=$pmdCount }
          }

          # Module-wise coverage
          $moduleCoverageData = @()
          foreach ($mod in $modulePaths) {
            $modXml = Select-Xml -Path reports\jacoco\jacoco-latest.xml -XPath "//package[contains(@name,'$($mod -replace '/','.')')]/counter[@type='INSTRUCTION']"
            if ($modXml) {
              $mMissed = ($modXml | Measure-Object -Property Node.missed -Sum).Sum
              $mCovered = ($modXml | Measure-Object -Property Node.covered -Sum).Sum
              $mCov = if (($mMissed+$mCovered) -gt 0) {[math]::Round(100*$mCovered/($mMissed+$mCovered),2)} else {0}
              $moduleCoverageData += [PSCustomObject]@{ Module=$mod; Coverage="$mCov%"; Visual=(Get-AsciiBar $mCov) }
            }
          }

          # Sonar breakdown overall
          function Fetch-SonarSeverity($severity,$component) {
            $url = "https://sonarcloud.io/api/issues/search?severities=$severity&issueStatuses=OPEN&ps=1&organization=$env:SONAR_ORG&componentKeys=$component"
            $resp = Invoke-WebRequest -Uri $url -Method Get
            if ($resp.Content -match '"total"\s*:\s*(\d+)') { return $matches[1] } else { return "0" }
          }
          $blocker = Fetch-SonarSeverity "BLOCKER" $env:SONAR_PROJECT_KEY
          $critical = Fetch-SonarSeverity "CRITICAL" $env:SONAR_PROJECT_KEY
          $major = Fetch-SonarSeverity "MAJOR" $env:SONAR_PROJECT_KEY
          $minor = Fetch-SonarSeverity "MINOR" $env:SONAR_PROJECT_KEY
          $info = Fetch-SonarSeverity "INFO" $env:SONAR_PROJECT_KEY

          # Module-wise Sonar
          $moduleSonarData = @()
          foreach ($mod in $modulePaths) {
            $modKey = "$($env:SONAR_PROJECT_KEY):$($mod -replace '/','.')"
            $moduleSonarData += [PSCustomObject]@{
              Module=$mod
              BLOCKER=(Fetch-SonarSeverity "BLOCKER" $modKey)
              CRITICAL=(Fetch-SonarSeverity "CRITICAL" $modKey)
              MAJOR=(Fetch-SonarSeverity "MAJOR" $modKey)
              MINOR=(Fetch-SonarSeverity "MINOR" $modKey)
              INFO=(Fetch-SonarSeverity "INFO" $modKey)
            }
          }

          # Write to GH Summary
          echo "### ?? Hygiene Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $env:GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $env:GITHUB_STEP_SUMMARY
          echo "| Checkstyle Violations | $checkstyleViolations |" >> $env:GITHUB_STEP_SUMMARY
          echo "| PMD Violations | $pmdViolations |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Total Static Violations | $totalViolations |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Code Coverage % | $jacocoCoverage% $coverageEmoji |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Coverage Visual | <code>$coverageBar</code> |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Sonar Issues (Total) | ${{ steps.sonar_issues.outputs.sonarIssueCount }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| ?? BLOCKER | $blocker |" >> $env:GITHUB_STEP_SUMMARY
          echo "| ?? CRITICAL | $critical |" >> $env:GITHUB_STEP_SUMMARY
          echo "| ?? MAJOR | $major |" >> $env:GITHUB_STEP_SUMMARY
          echo "| ?? MINOR | $minor |" >> $env:GITHUB_STEP_SUMMARY
          echo "| ? INFO | $info |" >> $env:GITHUB_STEP_SUMMARY

          echo "#### ?? Module-wise Coverage" >> $env:GITHUB_STEP_SUMMARY
          echo "| Module | Coverage % | Visual |" >> $env:GITHUB_STEP_SUMMARY
          echo "|---|---|---|" >> $env:GITHUB_STEP_SUMMARY
          $moduleCoverageData | ForEach-Object { echo "| $($_.Module) | $($_.Coverage) | <code>$($_.Visual)</code> |" >> $env:GITHUB_STEP_SUMMARY }

          echo "#### ?? Module-wise Violations" >> $env:GITHUB_STEP_SUMMARY
          echo "| Module | Checkstyle | PMD |" >> $env:GITHUB_STEP_SUMMARY
          echo "|---|---|---|" >> $env:GITHUB_STEP_SUMMARY
          $moduleStaticData | ForEach-Object { echo "| $($_.Module) | $($_.Checkstyle) | $($_.PMD) |" >> $env:GITHUB_STEP_SUMMARY }

          echo "#### ?? Module-wise Sonar Breakdown" >> $env:GITHUB_STEP_SUMMARY
          echo "| Module | BLOCKER | CRITICAL | MAJOR | MINOR | INFO |" >> $env:GITHUB_STEP_SUMMARY
          echo "|---|---|---|---|---|---|" >> $env:GITHUB_STEP_SUMMARY
          $moduleSonarData | ForEach-Object { echo "| $($_.Module) | $($_.BLOCKER) | $($_.CRITICAL) | $($_.MAJOR) | $($_.MINOR) | $($_.INFO) |" >> $env:GITHUB_STEP_SUMMARY }

          # Outputs
          "checkstyleCount=$checkstyleViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "pmdCount=$pmdViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "jacocoPercent=$jacocoCoverage%" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "coverageBar=$coverageBar" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarBlocker=$blocker" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarCritical=$critical" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarMajor=$major" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarMinor=$minor" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sonarInfo=$info" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      ##########################
      # ?? Email Summary
      ##########################
      - name: ?? Email Summary
        uses: dawidd6/action-send-mail@v3
        env:
          CHECKSTYLE_VIOLATIONS: ${{ steps.metrics.outputs.checkstyleCount }}
          PMD_VIOLATIONS: ${{ steps.metrics.outputs.pmdCount }}
          JACOCO_COVERAGE_PERCENT: ${{ steps.metrics.outputs.jacocoPercent }}
          SONARCLOUD_DASHBOARD_URL: ${{ steps.metrics.outputs.sonarOverallCodeDashBoardURL }}
          SONARCLOUD_ISSUE_BREAKDOWN_URL: ${{ steps.metrics.outputs.sonarOpenIssuesDashboardURL }}
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: >-
            ${{ job.status == 'success' && '? SUCCESS' || '? FAILURE' }} — Hygiene Check with Modules
          to: hemantbellanilearns77@gmail.com
          from: GitHub Hygiene Bot <hemantbellanilearns77@gmail.com>
          html_body: |
            <p>Hi Hemant,</p>
            <p>?? Hygiene Summary:</p>
            <ul>
              <li>? Checkstyle Violations: <strong>${{ steps.metrics.outputs.checkstyleCount }}</strong></li>
              <li>? PMD Violations: <strong>${{ steps.metrics.outputs.pmdCount }}</strong></li>
              <li>?? Code Coverage: <strong>${{ steps.metrics.outputs.jacocoPercent }}</strong></li>
              <li>?? Coverage Visual: <code>${{ steps.metrics.outputs.coverageBar }}</code></li>
              <li>?? SonarCloud Total Issues: <strong>${{ steps.sonar_issues.outputs.sonarIssueCount }}</strong></li>
            </ul>
            <p>?? <strong>Module-wise Coverage</strong></p>
            <table border="1" cellpadding="4">
              <tr><th>Module</th><th>Coverage %</th><th>Visual</th></tr>
              <!-- Module coverage rows -->
            </table>
            <p>?? <strong>Module-wise Violations</strong></p>
            <table border="1" cellpadding="4">
              <tr><th>Module</th><th>Checkstyle</th><th>PMD</th></tr>
              <!-- Module violation rows -->
            </table>
            <p>?? <strong>Module-wise Sonar Breakdown</strong></p>
            <table border="1" cellpadding="4">
              <tr><th>Module</th><th>BLOCKER</th><th>CRITICAL</th><th>MAJOR</th><th>MINOR</th><th>INFO</th></tr>
              <!-- Module sonar rows -->
            </table>
