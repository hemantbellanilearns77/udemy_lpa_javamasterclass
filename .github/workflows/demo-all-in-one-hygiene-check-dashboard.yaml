name: Demo All-in-One Dashboard

on:
  workflow_dispatch: # run manually for demo

jobs:
  analysis:
    runs-on: ubuntu-latest   # must be Linux for container-based actions

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      # 1. Run Checkstyle
      - name: Download Checkstyle
        run: |
          curl -L -o checkstyle.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.12.4/checkstyle-10.12.4-all.jar

      - name: Run Checkstyle
        run: |
          java -jar checkstyle.jar -c /google_checks.xml src/main/java > checkstyle-result.xml || true

      - name: Install SARIF Multitool
        run: |
          dotnet tool install --global Sarif.Multitool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Convert Checkstyle XML to SARIF
        run: |
          sarif multitool convert checkstyle-result.xml --tool "Checkstyle" --output checkstyle-result.sarif


      - name: Upload Checkstyle SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkstyle-result.sarif


      # 2. Run PMD
      - name: Run PMD
        uses: pmd/pmd-github-action@v1
        with:
          rulesets: "rulesets/java/quickstart.xml"
          sourcePath: "src/main/java"
          encoding: "UTF-8"
          format: "sarif"
          outputFile: "pmd-result.sarif"
      - name: Upload PMD SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-result.sarif

      # 3. Gradle bootstrap for JUnit + Jacoco
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Generate Gradle build file if missing
        run: |
          if [ ! -f build.gradle ]; then
            echo "plugins { id 'java'; id 'jacoco' }" > build.gradle
            echo "repositories { mavenCentral() }" >> build.gradle
            echo "test { useJUnitPlatform() }" >> build.gradle
          fi

      - name: Run Tests with Jacoco
        run: ./gradlew test jacocoTestReport

      - name: Upload JaCoCo Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/html

      # 4. SonarCloud scan (using your sonar-project.properties)
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.1
        with:
          args: >
            -Dproject.settings=sonar-project.properties
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # 5. Publish a simple HTML summary dashboard
      - name: Generate Static Dashboard
        run: |
          mkdir site
          echo "<h1>Demo Dashboard</h1>" >> site/index.html
          echo "<h2>Checkstyle, PMD, JUnit + Jacoco Reports</h2>" >> site/index.html
          echo "<p>✅ Checkstyle + PMD issues are visible in the GitHub Security tab</p>" >> site/index.html
          echo "<p>✅ JUnit tests executed with Gradle</p>" >> site/index.html
          echo "<p>✅ Jacoco report downloadable from workflow artifacts</p>" >> site/index.html
          echo "<p>✅ SonarCloud dashboard: https://sonarcloud.io/project/overview?id=hemantbellanilearns77_udemy_lpa_javamasterclass</p>" >> site/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
