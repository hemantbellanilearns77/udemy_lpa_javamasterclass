name: "Pre-Setup"
description: "Run all pre-hygiene checks before Setup step"

inputs:
  github-event-name:
    required: true
    description: ""
  github-ref-name:
    required: true
    description: ""
  github-head-commit-message:
    required: false
    description: ""
  github-schedule:
    required: false
    description: ""
  github-default-branch:
    required: true
    description: ""
  pat-token:
    required: true
    description: ""
  github-token:
    required: true
    description: ""
outputs:
  pre-setup-decision:
    value: ${{ steps.pre-setup-announce-decision.outputs.PRE-SETUP-DECISION }}
    description: ""
  pre-setup-decision-reason:
    value: ${{ steps.pre-setup-announce-decision.outputs.PRE-SETUP-DECISION-REASON }}
    description: ""
  STAGE_VS_MAIN_STATE:
    value: ${{ steps.stage_vs_main_state.outputs.STAGE_VS_MAIN_STATE }}
    description: ""
  LAST_COMMIT_MSG:
    value: ${{ steps.pre-setup-announce-decision.outputs.LAST_COMMIT_MSG }}
    description: ""
  LAST_COMMIT_AUTHOR:
    value: ${{ steps.pre-setup-announce-decision.outputs.LAST_COMMIT_AUTHOR }}
    description: ""
runs:
  using: "composite"
  steps:
    # Decide whether to run hygiene checks
    - name: Decide whether to run hygiene checks
      id: decide
      shell: bash
      run: |
        eventName="${{ inputs.github-event-name }}"
        defaultBranchName="${{ inputs.github-default-branch }}"
        branchName="${{ inputs.github-ref-name }}"
        lastCommitMessage="${{ inputs.github-head-commit-message }}"
        if [[ -z "$lastCommitMessage" ]]; then
          echo "⚡ No last commit message received via input → using last commit from git"
          lastCommitMessage=$(git log -1 --pretty=%B)
          # Export for later use / summary
          # echo "LAST_COMMIT_MSG=$lastCommitMessage" >> $GITHUB_OUTPUT
        fi
          echo "LAST_COMMIT_MSG<<EOF" >> $GITHUB_OUTPUT
          echo "$lastCommitMessage" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
        LAST_COMMIT_AUTHOR=$(git log -1 --pretty=%an)
        # echo "LAST_COMMIT_AUTHOR=$LAST_COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        echo "LAST_COMMIT_AUTHOR<<EOF" >> $GITHUB_OUTPUT
        echo "$LAST_COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        if [[ -z "$branchName" ]]; then
          echo "❌ No branch name resolved (event=$eventName, ref=${{ github.ref }})"
          echo "execute=false" >> $GITHUB_ENV
          echo "cancelReason=❌ No branch name resolved → stopping hygiene sweep." >> $GITHUB_ENV
          exit 0
        else
          
          if [[ "$eventName" == "push" ]]; then
           
            if [[ "$branchName" != "$defaultBranchName" ]]; then
              echo "❌ Push event but branch is '$branchName' (not '$defaultBranchName')."
              echo "execute=false" >> $GITHUB_ENV
              echo "cancelReason=❌ Push event but branch is '$branchName' (not '$defaultBranchName')." >> $GITHUB_ENV
              exit 0
            else
              if [[ "$lastCommitMessage" =~ execute.*?hygiene.*?sweep ]]; then
                echo "✅ Executing due to push event triggered by special commit message."
                echo "Push to '$defaultBranchName' with trigger phrase → will execute hygiene sweep."
                echo "execute=true" >> $GITHUB_ENV
                echo "cancelReason=✅ Executing due to push event triggered to '$defaultBranchName' with special commit message → will execute hygiene sweep." >> $GITHUB_ENV
              else
                echo "❌ Push to '$defaultBranchName' without trigger phrase → will not execute hygiene sweep and stop gracefully."
                echo "execute=false" >> $GITHUB_ENV
                echo "cancelReason=❌ Push to '$defaultBranchName' without trigger phrase → will not execute hygiene sweep and stop gracefully." >> $GITHUB_ENV
                exit 0
              fi
            fi
          elif [[ "$eventName" == "workflow_dispatch" ]]; then
            
            if [[ "$branchName" != "$defaultBranchName" ]]; then
              echo "❌ Manual run on branch '$branchName' (not '$defaultBranchName')."
              echo "execute=false" >> $GITHUB_ENV
              echo "cancelReason=❌ Manual run on branch '$branchName' (not '$defaultBranchName')." >> $GITHUB_ENV
              exit 0
            else
              echo "✅ Executing manually via workflow_dispatch."
              echo "Manual run on '$defaultBranchName' → will execute hygiene sweep."
              echo "execute=true" >> $GITHUB_ENV
              echo "cancelReason=✅ Executing manually via workflow_dispatch on branch: '$defaultBranchName' → will execute hygiene sweep." >> $GITHUB_ENV
            fi
          elif [[ "$eventName" == "schedule" ]]; then
            echo "Scheduled run → will execute hygiene sweep."
              echo "Scheduled run → will execute hygiene sweep."
              cronSchedule="${{ inputs.github-schedule }}"
              if [[ "$cronSchedule" == "30 3,15 * * 1-4,6" ]]; then
                echo "✅ Executing for a business day (Monday, Tuesday, Wednesday, Thursday, Saturday)."
                echo "execute=true" >> $GITHUB_ENV
                echo "cancelReason=✅ Executing for a business day (Monday, Tuesday, Wednesday, Thursday, Saturday) on branch: '$defaultBranchName' → will execute hygiene sweep." >> $GITHUB_ENV
              elif [[ "$cronSchedule" == "39 18 * * 4" ]]; then
                echo "✅ Executing on Friday (12:09 AM IST)."
                echo "execute=true" >> $GITHUB_ENV
                echo "cancelReason=✅ Executing on Friday (12:09 AM IST) on branch: '$defaultBranchName' → will execute hygiene sweep." >> $GITHUB_ENV
              elif [[ "$cronSchedule" == "30 3 * * 5" ]]; then
                echo "✅ Executing on Friday (9:00 AM IST)."
                echo "execute=true" >> $GITHUB_ENV
                echo "cancelReason=✅ Executing on Friday (9:00 AM IST) on branch: '$defaultBranchName' → will execute hygiene sweep." >> $GITHUB_ENV
              elif [[ "$cronSchedule" == "45 6 * * 5" ]]; then
                echo "✅ Executing on Friday (12:15 PM IST)."
                echo "execute=true" >> $GITHUB_ENV
                echo "cancelReason=✅ Executing on Friday (12:15 PM IST) on branch: '$defaultBranchName' → will execute hygiene sweep." >> $GITHUB_ENV
              fi
          else
            echo "❌ Unsupported event ($eventName) → will not execute hygiene sweep and stop gracefully."
            echo "execute=false" >> $GITHUB_ENV
            echo "cancelReason=❌ Unsupported event ($eventName) → will not execute hygiene sweep and stop gracefully." >> $GITHUB_ENV
            exit 0
          fi
        fi


    # Check stage vs main state
    - name: Check stage vs Default Branch (main) state
      id: stage_vs_main_state
      shell: bash
      env:
        MAX_AHEAD_COMMITS: 7
        MAX_DIVERGENCE_DAYS: 7
      run: |
        
        defaultBranchName="${{ inputs.github-default-branch }}"
        # git fetch origin main stage
        git fetch origin "$defaultBranchName" stage
        MAX_AHEAD_COMMITS=$(echo "$MAX_AHEAD_COMMITS" | tr -d '\r')
        # Case 1: stage == main
        if [[ "$(git rev-list origin/$defaultBranchName..origin/stage --count)" -eq 0 ]] && \
           [[ "$(git rev-list origin/stage..origin/$defaultBranchName --count)" -eq 0 ]]; then
          echo "✅ Stage already in sync with '$defaultBranchName'"
          echo "STAGE_VS_MAIN_STATE=✅ Stage already in sync with '$defaultBranchName'" >> $GITHUB_OUTPUT
          echo "execute=true" >> $GITHUB_ENV
          echo "cancelReason=✅ Stage already in sync with → will execute hygiene sweep." >> $GITHUB_ENV

        elif git merge-base --is-ancestor origin/$defaultBranchName origin/stage; then
          ahead=$(git rev-list origin/$defaultBranchName..origin/stage --count)
          echo "DEBUG: ahead='$ahead' MAX_AHEAD_COMMITS='$MAX_AHEAD_COMMITS'"
          if [[ "$ahead" -gt "$MAX_AHEAD_COMMITS" ]]; then
            echo "❌ Stage is $ahead commits ahead of '$defaultBranchName'. PR required."
            echo "STAGE_VS_MAIN_STATE=❌ Stage is $ahead commits ahead of '$defaultBranchName'. PR required." >> $GITHUB_OUTPUT
            echo "execute=false" >> $GITHUB_ENV
            echo "cancelReason=❌ Stage is $ahead commits ahead of '$defaultBranchName'. PR required." >> $GITHUB_ENV
            exit 0
          else
            echo "⚠️ Stage is ${ahead} commit(s) ahead of '$defaultBranchName'"
            echo "STAGE_VS_MAIN_STATE=⚠️ Stage is ${ahead} commit(s) ahead of '$defaultBranchName'" >> $GITHUB_OUTPUT
            echo "execute=true" >> $GITHUB_ENV
            echo "cancelReason=⚠️ Though, Stage is ${ahead} commit(s) ahead of '$defaultBranchName → will execute hygiene sweep." >> $GITHUB_ENV
          fi
        else # Case 3: stage diverged (not rebased)
          common=$(git merge-base origin/$defaultBranchName origin/stage)
          common_ts=$(git show -s --format=%ct $common)
          now_ts=$(date +%s)
          age_days=$(( (now_ts - common_ts) / 86400 ))

          if [[ "$age_days" -gt "$MAX_DIVERGENCE_DAYS" ]]; then
            echo "❌ Stage diverged for ${age_days}d → rebase required."
            echo "STAGE_VS_MAIN_STATE=❌ Stage diverged for ${age_days}d → rebase required." >> $GITHUB_OUTPUT
            echo "execute=false" >> $GITHUB_ENV
            echo "cancelReason=❌ Stage diverged for ${age_days}d → rebase required." >> $GITHUB_ENV
            exit 0
          fi
          if [[ "$age_days" -eq 0 ]]; then
            hours=$(( (now_ts - common_ts) / 3600 ))
            if [[ "$hours" -eq 0 ]]; then
              echo "⚠️ Stage diverged roughly within past hour"
              echo "STAGE_VS_MAIN_STATE=⚠️ Stage diverged roughly within past hour" >> $GITHUB_OUTPUT
              echo "execute=true" >> $GITHUB_ENV
              echo "cancelReason=⚠️ Though, Stage diverged roughly within past hour → will execute hygiene sweep." >> $GITHUB_ENV
            else
              echo "⚠️ Stage diverged ~${hours}h ago"
              echo "STAGE_VS_MAIN_STATE=⚠️ Stage diverged ~${hours}h ago" >> $GITHUB_OUTPUT
              echo "execute=true" >> $GITHUB_ENV
              echo "cancelReason=⚠️ Though, Stage diverged ~${hours}h ago → will execute hygiene sweep." >> $GITHUB_ENV
            fi
          else
            echo "⚠️ Stage diverged ~${age_days}d ago"
            echo "STAGE_VS_MAIN_STATE=⚠️ Stage diverged ~${age_days}d ago" >> $GITHUB_OUTPUT
            echo "execute=true" >> $GITHUB_ENV
            echo "cancelReason=⚠️ Though, Stage diverged ~${age_days}d ago → will execute hygiene sweep." >> $GITHUB_ENV
          fi
        fi
     # Announce Final Decision
    - name: Announce Final Decision
      shell: pwsh
      id: pre-setup-announce-decision
      run: |
        $presetupdecision="$env:cancel"
        $msg = "$env:cancelReason"
        Write-Host "Decision to Execute or Cancel: $presetupdecision"
        Write-Host "Decision to Execute or Cancel → Reason:  $msg"
        echo "pre-setup-decision=$presetupdecision" >> $env:GITHUB_OUTPUT
        echo "pre-setup-decision-reason=$msg" >> $env:GITHUB_OUTPUT
        
        $lastCommitMessage = "${{ steps.decide.outputs.LAST_COMMIT_MSG }}"
        $lastCommitAuthor = "${{ steps.decide.outputs.LAST_COMMIT_AUTHOR }}"
        
        if ([string]::IsNullOrEmpty($lastCommitMessage)) {
          $lastCommitMessage = "N/A (manual workflow_dispatch)"
        }

        if ([string]::IsNullOrEmpty($lastCommitAuthor)) {
          $lastCommitAuthor = "N/A"
        }
         
        echo "LAST_COMMIT_MSG<<EOF" >> $env:GITHUB_OUTPUT
        echo "$lastCommitMessage" >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT
        
        echo "LAST_COMMIT_AUTHOR<<EOF" >> $env:GITHUB_OUTPUT
        echo "$lastCommitAuthor" >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT
      

#    # Cancel gracefully if needed
#    - name: Cancel current workflow gracefully
#          if: env.cancel == 'true'
#      shell: pwsh
#      run: |
#        $msg = "$env:cancelReason"
#        Write-Host "ℹ️ Cancelling workflow without executing hygiene sweep."
#        Write-Host "Cancel Reason:  $msg"
#        echo "### ❌ Hygiene Checks Cancelled" >> $env:GITHUB_STEP_SUMMARY
#        echo "" >> $env:GITHUB_STEP_SUMMARY
#        echo "$msg" >> $env:GITHUB_STEP_SUMMARY
#        echo "" >> $env:GITHUB_STEP_SUMMARY
#        echo "**Triggered by:** ${{ inputs.github-event-name }}" >> $env:GITHUB_STEP_SUMMARY
#        echo "**Branch:** ${{ inputs.github-ref-name }}" >> $env:GITHUB_STEP_SUMMARY
#        # Use fallback for workflow_dispatch
#        $lastCommitMessage = "${{ steps.decide.outputs.LAST_COMMIT_MSG }}"
#        $lastCommitAuthor = "${{ steps.decide.outputs.LAST_COMMIT_AUTHOR }}"
#
#        if ([string]::IsNullOrEmpty($lastCommitMessage)) {
#          $lastCommitMessage = "N/A (manual workflow_dispatch)"
#        }
#
#        if ([string]::IsNullOrEmpty($lastCommitAuthor)) {
#          $lastCommitAuthor = "N/A"
#        }
#        echo "**Last Commit Message:** $lastCommitMessage" >> $env:GITHUB_STEP_SUMMARY
#        echo "**Last Commit Author:** $lastCommitAuthor" >> $env:GITHUB_STEP_SUMMARY
#        exit 1