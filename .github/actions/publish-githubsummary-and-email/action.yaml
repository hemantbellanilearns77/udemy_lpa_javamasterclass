##############################################################
# PUBLISH GITHUB SUMMARY SECTION AND SEND EMAIL
##############################################################
name: "Publish GITHUB-Summary and Send Email"
description: ""
inputs:
  startTime:
    description: "Start time from setup-starttime composite"
    required: true
outputs: {} # If you don't have any inputs, you can leave it empty or remove this line.
runs:
  using: "composite"
  steps:
    ##########################
    # SUMMARY SECTION
    ##########################

    - name: 📊 Add Hygiene Summary (Checkstyle + PMD + JaCoCo + Sonar Issues)
      id: metrics
      shell: pwsh
      env:
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
      run: |
        ############################################################
        # === Parse JaCoCo XML (Overall) ===
        ############################################################
        $xml = Select-Xml -Path reports\jacoco\jacoco-latest.xml -XPath "//report/counter[@type='INSTRUCTION']"
        $missed = [int]$xml.Node.missed
        $covered = [int]$xml.Node.covered
        $total = $missed + $covered
        if ($total -gt 0) {
          $jacocoCoverage = [math]::Round(100 * $covered / $total, 2)
        } else {
          $jacocoCoverage = 0
        }
        
        function Get-AsciiBar($percent) {
        
          $blocks = 50
          $filled = [math]::Round($blocks * $percent / 100)
          $empty = $blocks - $filled
          return ('█' * $filled) + ('░' * $empty)
        }
        
        ############################################################
        # === Parse Checkstyle & PMD Reports ===
        ############################################################
        $checkstyleViolations = 0
        if (Test-Path "reports/checkstyle") {
          Get-ChildItem reports/checkstyle/*.txt | ForEach-Object {
            $checkstyleViolations += (Get-Content $_ | Where-Object { $_.Trim() -ne "" }).Count
          }
        }
        
        $pmdViolations = 0
        if (Test-Path "reports/pmd") {
          Get-ChildItem reports/pmd/*.txt | ForEach-Object {
            $pmdViolations += (Get-Content $_ | Where-Object { $_ -match "^[A-Za-z]:\\" }).Count
          }
        }
        $totalViolations = $checkstyleViolations + $pmdViolations
        
        ############################################################
        # === Fetch SonarCloud Issue Count (OPEN) ===
        ############################################################
        Start-Sleep -Seconds $env:SONAR_FETCH_SLEEP_TIME
        
        $projectKey = $env:SONAR_PROJECT_KEY
        $projectOrg = $env:SONAR_ORG
        $branch = $env:TRIGGER_BRANCH 
        # Confirm if token is passed
        if (-not $env:SONAR_TOKEN) {
         Write-Error "⚠ SONAR_TOKEN is empty!"
         exit 1
        }
        $url = "https://sonarcloud.io/api/issues/search?issueStatuses=OPEN,CONFIRMED&id=$projectKey&organization=$projectOrg"
        Write-Host "?? Calling SonarCloud API: $url"
        try {
         $response = Invoke-WebRequest -Uri $url -Method Get
         $body = $response.Content
        
         if ($body -match '"total"\s*:\s*(\d+)') {
           $totalSonarFetchedIssues = $matches[1]
           Write-Host "? Total SonarCloud Issues (OPEN): $totalSonarFetchedIssues"
         } else {
           Write-Error "? Could not extract issue count from response body: $body"
           exit 1
         }
        } catch {
         Write-Error "⚠ API call failed: $_"
         exit 1
        }
        
        
        ############################################################
        # === Fetch SonarCloud Coverage Metrics ===
        ############################################################
        $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ env.SONAR_TOKEN }}:"))
        $headers = @{ Authorization = "Basic $encodedAuth" }
        
        function Get-SonarMetric($metricKey) {
          $url = "https://sonarcloud.io/api/measures/component?component=$projectKey&metricKeys=coverage"
          Write-Host "Coverage Fetch URL is $url"
          try {
            $resp = Invoke-WebRequest -Uri $url -Method Get
            $json = $resp.Content | ConvertFrom-Json
            return $json.component.measures[0].value
          } catch {
            Write-Error "⚠ API call failed: $_"
            exit 1
          }
        }
        
        $sonarCoverage = Get-SonarMetric "coverage"
        Write-Output "Writing Output Coverage as fetched from Sonar is $sonarCoverage" 
        if ($sonarCoverage -ge 50) {
          $coverageEmoji = "🟢"
        } elseif ($sonarCoverage -ge 20) {
          $coverageEmoji = "🟡"
        } else {
          $coverageEmoji = "🔴"
        }
        $coverageBar = Get-AsciiBar $sonarCoverage
        
        $sonarCoverage = Get-SonarMetric "coverage"
        # Ensure only the first numeric value is used
        if ($sonarCoverage -is [array]) {
          $sonarCoverage = $sonarCoverage[0]
        }
        # Try to cast to a number safely
        $sonarCoverage = [double]($sonarCoverage -replace '[^0-9\.]', '')
        if ($sonarCoverage -ge 50) {
          $coverageEmoji = "🟢"
        } elseif ($sonarCoverage -ge 20) {
          $coverageEmoji = "🟡"
        } else {
          $coverageEmoji = "🔴"
        }
        $coverageBar = Get-AsciiBar $sonarCoverage
        
        ###########################################################
        # === Fetch Overall Severity Breakdown (UI-Aligned) ===
        ###########################################################
         function Fetch-SonarSeverity($severity) {
          $url = "https://sonarcloud.io/api/issues/search?severities=$severity&issueStatuses=OPEN,CONFIRMED&organization=$projectOrg&id=$projectKey"
        
          try {
            $resp = Invoke-WebRequest -Uri $url -Headers $headers -Method Get
            $json = $resp.Content | ConvertFrom-Json
            return $json.total
          } catch {
            Write-Error "⚠ API call failed: $_"
            exit 1
          }
        }
        
        $blocker = Fetch-SonarSeverity "BLOCKER"
        $high = Fetch-SonarSeverity "CRITICAL"
        $medium = Fetch-SonarSeverity "MAJOR"
        $low = Fetch-SonarSeverity "MINOR"
        $info = Fetch-SonarSeverity "INFO"
        ############################################################
        # === Generate Severity URLs (global and per module) ===
        ############################################################
        $severityLinks = @{
          BLOCKER = "https://sonarcloud.io/project/issues?severities=BLOCKER&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
          HIGH    = "https://sonarcloud.io/project/issues?severities=CRITICAL&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
          MEDIUM  = "https://sonarcloud.io/project/issues?severities=MAJOR&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
          LOW     = "https://sonarcloud.io/project/issues?severities=MINOR&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
          INFO    = "https://sonarcloud.io/project/issues?severities=INFO&issueStatuses=OPEN,CONFIRMED&id=$projectKey"
        }
        
        ############################################################
              # === Generate URLS ===
        ############################################################
         $sonarOverallCodeDashBoardUrl = "https://sonarcloud.io/summary/overall?id=$projectKey&branch=$branch"
         $sonarOpenIssuesDashboardUrl= "https://sonarcloud.io/project/issues?issueStatuses=OPEN%2CCONFIRMED&id=$projectKey"
        
         function MarkEmoji($count) {
            if ($count -eq 0) { return "✅" }
            elseif ($count -le 5) { return "🟡" }
            else { return "🔴" }
          } # end of function Mark
        
        $sonarBlockerEmojiMark = $(MarkEmoji $blocker)
        $sonarHighEmojiMark = $(MarkEmoji $high)
        $sonarMediumEmojiMark = $(MarkEmoji $medium)
        $sonarLowEmojiMark = $(MarkEmoji $low)
        $sonarInfoEmojiMark = $(MarkEmoji $info)
        
        ############################################################
              # === Write Overall Table ===
        ############################################################
        echo "### 📊 Hygiene Summary (Checkstyle + PMD + JaCoCo + Sonar)" >> $env:GITHUB_STEP_SUMMARY
        echo "| **Metric**              | **Value** |" >> $env:GITHUB_STEP_SUMMARY
        echo "|-------------------------|-----------|" >> $env:GITHUB_STEP_SUMMARY
        echo "| Checkstyle Violations   | $checkstyleViolations |" >> $env:GITHUB_STEP_SUMMARY
        echo "| PMD Violations          | $pmdViolations |" >> $env:GITHUB_STEP_SUMMARY
        echo "| Code Coverage (Sonar)   | $sonarCoverage% $coverageEmoji |" >> $env:GITHUB_STEP_SUMMARY
        echo "| Coverage Visual         | <code>$coverageBar</code> |" >> $env:GITHUB_STEP_SUMMARY
        echo "| 🗂 Sonar Issues (Total) | $totalSonarFetchedIssues |" >> $env:GITHUB_STEP_SUMMARY
        echo "| 🟥 BLOCKER              | $sonarBlockerEmojiMark [$blocker]($($severityLinks.BLOCKER)) |" >> $env:GITHUB_STEP_SUMMARY
        echo "| 🟧 HIGH                 | $sonarHighEmojiMark [$high]($($severityLinks.HIGH)) |" >> $env:GITHUB_STEP_SUMMARY
        echo "| 🟨 MEDIUM               | $sonarMediumEmojiMark [$medium]($($severityLinks.MEDIUM)) |" >> $env:GITHUB_STEP_SUMMARY
        echo "| 🟦 LOW                  | $sonarLowEmojiMark [$low]($($severityLinks.LOW)) |" >> $env:GITHUB_STEP_SUMMARY
        echo "| ℹ INFO                 | $sonarInfoEmojiMark [$info]($($severityLinks.INFO)) |" >> $env:GITHUB_STEP_SUMMARY
        echo "| Legend                 | ✅ is GREAT-GOING 🟡 is WATCH-OUT  🔴 is GONE-OVERBOARD |" >> $env:GITHUB_STEP_SUMMARY
        echo "|-------------------------|-----------|" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "🌐 [View SonarCloud Overall Code Dashboard]($sonarOverallCodeDashBoardUrl)" >> $env:GITHUB_STEP_SUMMARY
        echo "🌐 [View SonarCloud Issues Breakdown Dashboard]($sonarOpenIssuesDashboardUrl)" >> $env:GITHUB_STEP_SUMMARY
        
        ############################################################
        # === Outputs for Email ===
        ############################################################
        "checkstyleCount=$checkstyleViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "pmdCount=$pmdViolations" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "totalSonarFetchedIssues=$totalSonarFetchedIssues" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "coverageBar=$coverageBar" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarCoverage=$sonarCoverage%" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        "sonarBlocker=$blocker" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarBlockerEmojiMark=$sonarBlockerEmojiMark" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarBlockerURL=$($severityLinks.BLOCKER)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        "sonarHigh=$high" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarHighEmojiMark=$sonarHighEmojiMark" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarHighURL=$($severityLinks.HIGH)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        "sonarMedium=$medium" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarMediumEmojiMark=$sonarMediumEmojiMark" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarMediumURL=$($severityLinks.MEDIUM)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        "sonarLow=$low" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarLowEmojiMark=$sonarLowEmojiMark" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarLowURL=$($severityLinks.LOW)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        "sonarInfo=$info" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarInfoEmojiMark=$sonarInfoEmojiMark" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarInfoURL=$($severityLinks.INFO)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        "sonarOverallCodeDashBoardURL=$sonarOverallCodeDashBoardUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "sonarOpenIssuesDashboardURL=$sonarOpenIssuesDashboardUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        ###############################################################################
        # === SonarCloud Module Severity Breakdown (Aggregated per MODULE_PATHS) ===
        ###############################################################################
        
        # Normalize line endings, build map
        $modulePathMap = @{}
        $lines = ($env:MODULE_PATHS -replace "`r", "") -split "`n"
        
        foreach ($line in $lines) {
          if ($line.Trim()) {
          $parts = $line.Trim() -split "=", 2  # limit to 2 parts only 
           Write-Output "Next line: '$line' split into key='$($parts[1])' and value='$($parts[0])'"
            if ($parts.Count -eq 2) {
              Write-Output "Creating map entry: key='$($parts[1])', value='$($parts[0])'"
              $modulePathMap[$parts[1]] = $parts[0]
            }
          }
        }
        
        # Debug: print map
          foreach ($k in $modulePathMap.Keys) {
            Write-Output "Map Key: $k => Value: $($modulePathMap[$k])"
        }
        # Initialize aggregation buckets for each module
        $moduleAgg = @{}
        foreach ($pathKey in $modulePathMap.Keys) {
          Write-Output "Iterating over modulePathMap next path key is $pathKey"
          $moduleName = $modulePathMap[$pathKey]
          Write-Output "So moduleName is initialized to: $moduleName"
          if (-not $moduleAgg) {
                Write-Output "❌ moduleAgg is NULL"
          } 
        
          if (-not $moduleAgg.ContainsKey($moduleName)) { 
        
            $moduleAgg[$moduleName] = @{
            BLOCKER = 0; HIGH = 0; MEDIUM = 0; LOW = 0; INFO = 0
            }
          }
        }
        if (-not $moduleAgg) {
                Write-Output "❌ moduleAgg is NULL"
        }  else {
                Write-Output "✅ moduleAgg exists. Current contents:"
                $moduleAgg.GetEnumerator() | ForEach-Object {
                $val = $_.Value
                if (-not $val) {
                  Write-Output ("   ⚠ Key = {0}, Value is NULL" -f $_.Key)
                }
                else {
                  Write-Output ("   Key = {0}, Value = {1}" -f $_.Key, ($val | ConvertTo-Json -Compress))
                }
              } 
           # Debug: Print out current aggregate state
            Write-Output "----- Current Module Aggregates -----"
           foreach ($moduleName in $moduleAgg.Keys) {
            $bucket = $moduleAgg[$moduleName]
             Write-Output ("Module: {0} | BLOCKER={1}, HIGH={2}, MEDIUM={3}, LOW={4}, INFO={5}" -f `
                                 $moduleName, $bucket.BLOCKER, $bucket.HIGH, $bucket.MEDIUM, $bucket.LOW, $bucket.INFO)
           }
             Write-Output "--------------------------------------"
          }
        
        # Step 1: Get directory list from SonarCloud
        $dirFacetssUrl = "https://sonarcloud.io/api/issues/search?organization=$projectOrg&componentKeys=$projectKey&resolved=false&facets=directories&ps=1"
        Write-Output "Fetching directories from: $dirFacetssUrl"
        $resp = Invoke-WebRequest -Uri $dirFacetssUrl -Headers $headers -Method Get
        $json = $resp.Content | ConvertFrom-Json
        $directories = $json.facets | Where-Object { $_.property -eq "directories" } | Select-Object -ExpandProperty values
        Write-Output "Directories fetched as below:"
        $directories | ForEach-Object { Write-Output " - $($_.val)" }
        
        # Step 2: Loop through directories and aggregate counts per module
        foreach ($dirObj in $directories) {
        
          $dir = $dirObj.val
          $matchedModule = $null
          Write-Output "Next Directory during iteration is: $dir"
        
          # check if src of any key in modulePathMap matches the starting string of the current directory 
          foreach ($pathKey in $modulePathMap.Keys) {
            if ($dir -like "$pathKey*") {
              Write-Output "✅ Match: '$dir' starts with '$pathKey'"
              $matchedModule = $modulePathMap[$pathKey]
              Write-Output "Matched module: $matchedModule"
              break
            } 
          } 
          # double check if any module has matched to account for current directory 
          if (-not $matchedModule) {
            Write-Output "⚠ Skipping: '$dir' does not match any configured module"
            Write-Output " ⚠ Current Directory does not fall under any configured module so will skip for now flagging it $dir"
            Write-Output " ⚠ Also due to that mismatch $matchedModule is empty"
          } else {
                if (-not $moduleAgg) {
                  Write-Output "❌ moduleAgg is NULL"
                } else {
                Write-Output "✅ moduleAgg exists. Will execute severity checks and aggregate"  
                if ($null -ne $moduleAgg[$matchedModule]) {
                Write-Output "✅ moduleAgg has a row for: $matchedModule and can be populated with severity numbers"
        
                # now fetch severity-wise and then aggregate it
                  $sevList = "BLOCKER,CRITICAL,MAJOR,MINOR,INFO"
                  $sevUrl = "https://sonarcloud.io/api/issues/search?organization=$projectOrg&componentKeys=$projectKey&directories=$dir&severities=$sevList&issueStatuses=OPEN,CONFIRMED&resolved=false&ps=500"
                  $response = Invoke-WebRequest -Uri $sevUrl -Headers $headers -Method Get | ConvertFrom-Json
        
                  # Initialize counts
                  $counts = @{
                  BLOCKER = 0
                  HIGH    = 0
                  MEDIUM  = 0
                  LOW     = 0
                  INFO    = 0
                }
        
                  foreach ($issue in $response.issues) {
                  switch ($issue.severity) {
                  "BLOCKER"  { $counts.BLOCKER++ }
                  "CRITICAL" { $counts.HIGH++ }
                  "MAJOR"    { $counts.MEDIUM++ }
                  "MINOR"    { $counts.LOW++ }
                  "INFO"     { $counts.INFO++ }
                }
                }
        
                # Now add to moduleAgg
                  $moduleAgg[$matchedModule]["BLOCKER"] += $counts.BLOCKER
                  $moduleAgg[$matchedModule]["HIGH"]    += $counts.HIGH
                  $moduleAgg[$matchedModule]["MEDIUM"]  += $counts.MEDIUM
                  $moduleAgg[$matchedModule]["LOW"]     += $counts.LOW
                  $moduleAgg[$matchedModule]["INFO"]    += $counts.INFO
        
        
              } else {
                  Write-Output "⚠ Unexpected: \$moduleAgg['$matchedModule'] is null. Skipping severity count."
              }
            } # end of else of check for $moduleAgg being null
          } # end of else of matchedModule not being found
        } # end step 2
        
        # Before moving to next step printing it in logs... 
        if (-not $moduleAgg) {
          Write-Output "❌ moduleAgg is NULL"
        }  else {
          Write-Output "✅ moduleAgg exists. Current contents:"
          $moduleAgg.GetEnumerator() | ForEach-Object {
            $val = $_.Value
            if (-not $val) {
              Write-Output ("   ⚠ Key = {0}, Value is NULL" -f $_.Key)
            }
            else {
              Write-Output ("   Key = {0}, Value = {1}" -f $_.Key, ($val | ConvertTo-Json -Compress))
            }
          }
          # Debug: Print out current aggregate state
          Write-Output "----- Current Module Aggregates -----"
          foreach ($moduleName in $moduleAgg.Keys) {
            $bucket = $moduleAgg[$moduleName]
            Write-Output ("Module: {0} | BLOCKER={1}, HIGH={2}, MEDIUM={3}, LOW={4}, INFO={5}" -f `
                          $moduleName, $bucket.BLOCKER, $bucket.HIGH, $bucket.MEDIUM, $bucket.LOW, $bucket.INFO)
          }
          Write-Output "--------------------------------------"
        }          
        
          # Step 3: Pretty-print module severity breakdown with conditional icons
          if ($moduleAgg.Count -gt 0) {
          echo "### 📦 SonarCloud Module Severity Breakdown" >> $env:GITHUB_STEP_SUMMARY
          echo "| Module | 🟥 BLOCKER | 🟧 HIGH | 🟨 MEDIUM | 🟦 LOW  | ℹ INFO |" >> $env:GITHUB_STEP_SUMMARY
          echo "|--------|------------|---------|----------|--------|--------|" >> $env:GITHUB_STEP_SUMMARY
          foreach ($mod in $moduleAgg.Keys) {
          $b = $moduleAgg[$mod]
        
          function Mark($count) {
            if ($count -eq 0) { return "✅ $count" }
            elseif ($count -le 5) { return "🟡 $count" }
            else { return "🔴 $count" }
          } # end of function Mark
        
          echo "| **$mod** | $(Mark $b.BLOCKER) | $(Mark $b.HIGH) | $(Mark $b.MEDIUM) | $(Mark $b.LOW) | $(Mark $b.INFO) |" >> $env:GITHUB_STEP_SUMMARY
          }
        }
        
        # Step 4: Export results as an output variable for email step
        # Example: "udemy_lpa_javamasterclass:0,2,15,5,0;misc_utils:0,1,8,4,0"
          $emailModuleSevAggBreakdown = ($moduleAgg.Keys | ForEach-Object {
            $b = $moduleAgg[$_]
            "${_}:$(Mark $b.BLOCKER),$(Mark $b.HIGH),$(Mark $b.MEDIUM),$(Mark $b.LOW),$(Mark $b.INFO)"
          }) -join ";"
        
        $emailModuleSevAggTable = "<table border='1' cellpadding='5' cellspacing='0'>"
        $emailModuleSevAggTable += "<tr><th>Module</th><th>BLOCKER</th><th>HIGH</th><th>MEDIUM</th><th>LOW</th><th>INFO</th></tr>"
        
        foreach ($entry in $emailModuleSevAggBreakdown -split ";") {
        $parts = $entry -split ":"
        if ($parts.Count -eq 2) {
        $module = $parts[0]
        $counts = $parts[1] -split ","
        $emailModuleSevAggTable += "<tr>"
        $emailModuleSevAggTable += "<td>$module</td>"
        foreach ($c in $counts) {
        $emailModuleSevAggTable += "<td align='center'>$c</td>"
        }
        $emailModuleSevAggTable += "</tr>"
        }
        }
        
        $emailModuleSevAggTable += "</table>"
        
        # Export both plain breakdown and HTML table
        echo "EMAIL_BREAKDOWN=$emailModuleSevAggBreakdown" >> $env:GITHUB_ENV
        echo "EMAIL_MODULE_SEV_AGG_TABLE=$emailModuleSevAggTable" >> $env:GITHUB_ENV 
      
      
      ###################################
      # EXECUTION INFO COMPOSITE CALL
      ###################################
    - name: Call Execution Info
      id: execution-info
      uses: ./.github/actions/execution-info
      with:
        startTime: ${{ inputs.startTime }}

    - name: Use output in summary
      run: |
        echo "Start Time: ${{ steps.execution-info.outputs.startTime }}"
        echo "End Time:   ${{ steps.execution-info.outputs.endTime }}"
        echo "Duration:   ${{ steps.execution-info.outputs.formattedDuration }}"
      shell: pwsh
    ##########################
    # Email Success Summary
    ##########################

    - name: 📧 Email Summary
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ env.SMTP_SERVER_ADDRESS }}
        server_port: ${{ env.SMTP_SERVER_PORT }}
        username: ${{ env.SMTP_USER }}
        password: ${{ env.SMTP_PASS }}
        
        subject: >-
          ${{ job.status == 'success' && '✅ SUCCESS' || '❌ FAILURE' }} 
          | Java MasterClass Hygiene Check for ${{ github.repository }} (main)
          ${{ steps.metrics.outputs.sonarCoverage && steps.metrics.outputs.sonarCoverage < 77 && '(⚠️ Coverage Below Threshold)' || '' }}
        
        to: ${{ env.EMAIL_RECIPIENT }}
        from: GitHub Hygiene Bot <${{ env.EMAIL_RECIPIENT }}>
        html_body: |
          <p>Hi Hemant,</p>
          <p>✅ A GitHub Hygiene Check (CheckStyle, PMD, JaCoCo, SonarCloud) was completed on <strong>${{ github.repository }}</strong> (branch: <code>${{ env.TRIGGER_BRANCH }}</code>).</p>
          
          <p>📊 <strong>Hygiene Summary:</strong></p>
          <ul>
            <li>📝 <strong>Checkstyle Violations:</strong> <code>${{ steps.metrics.outputs.checkstyleCount }}</code></li>
            <li>🔍 <strong>PMD Violations:</strong> <code>${{ steps.metrics.outputs.pmdCount }}</code></li>
            <li>📈 <strong>Code Coverage:</strong> <code>${{ steps.metrics.outputs.sonarCoverage }}</code></li>
            <li>🎯 <strong>Coverage Visual: <code>${{ steps.metrics.outputs.coverageBar }}</code></li>
            <li>🗂 <strong>SonarCloud Total Issues:</strong><code>${{ steps.metrics.outputs.totalSonarFetchedIssues }}</code></li>
            <li>🌐 <a href="${{ steps.metrics.outputs.sonarOverallCodeDashBoardURL }}"><code>View SonarCloud Overall Code Dashboard</code></a></li>
          </ul>
          
          <p>🛠 <strong>SonarCloud Severity Breakdown:</strong></p>
          <ul>
            <li>🟥 <strong>BLOCKER:</strong><a href="${{ steps.metrics.outputs.sonarBlockerUrl }}"><code>${{ steps.metrics.outputs.sonarBlocker }}</code></a> ${{ steps.metrics.outputs.sonarBlockerEmojiMark }}</li>
            <li>🟧 <strong>HIGH:</strong> <a href="${{ steps.metrics.outputs.sonarHighUrl }}"><code>${{ steps.metrics.outputs.sonarHigh }}</code></a> ${{ steps.metrics.outputs.sonarHighEmojiMark }}</li>
            <li>🟨 <strong>MEDIUM:</strong> <a href="${{ steps.metrics.outputs.sonarMediumUrl }}"><code>${{ steps.metrics.outputs.sonarMedium }}</code></a> ${{ steps.metrics.outputs.sonarMediumEmojiMark }}</li>
            <li>🟦 <strong>LOW:</strong> <a href="${{ steps.metrics.outputs.sonarLowUrl }}"><code>${{ steps.metrics.outputs.sonarLow }}</code></a> ${{ steps.metrics.outputs.sonarLowEmojiMark }}</li>
            <li>ℹ️<strong>INFO:</strong> <a href="${{ steps.metrics.outputs.sonarInfoUrl }}"><code>${{ steps.metrics.outputs.sonarInfo }}</code></a> ${{ steps.metrics.outputs.sonarInfoEmojiMark }}</li>
            <li>🌐 <a href="${{ steps.metrics.outputs.sonarOpenIssuesDashboardURL }}"><code>View SonarCloud Open Issues Breakdown Dashboard</code></a></li>
          </ul>
          
          <h3>📦 SonarCloud Module Severity Breakdown</h3>
          ${{ env.EMAIL_MODULE_SEV_AGG_TABLE }}
          
          <p>📦 <strong>Artifacts:</strong> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"><code>Download from workflow run</code></a></p>
          <p>📜 <strong>Last Commit Info:</strong></p>
          <ul>
            <li>🌐 <strong>Click Short SHA to view commit on GitHub:</strong> <a href="https://github.com/${{ github.repository }}/commit/${{ steps.execution-info.outputs.FULL_SHA }}"><code>${{ steps.execution-info.outputs.SHORT_SHA }}</code></a></li>
            <li><strong>Message:</strong> <code><em>${{ steps.execution-info.outputs.COMMIT_MSG }}</em></code></li>
            <li><strong>Author:</strong> <code>${{ steps.execution-info.outputs.COMMIT_AUTHOR }}</code></li>
            <li><strong>Date:</strong> <code>${{ steps.execution-info.outputs.COMMIT_DATE }}(${{ steps.execution_info.outputs.COMMIT_AGO }})</code></li>
          </ul>
          
          <p><strong>Github Job Execution Info:</strong></p>
          <ul>
              <li>${{ steps.execution-info.outputs.TRIGGER_INFO }}</li>
              <li>⏱ <strong>Start Time:</strong> <code>${{ steps.execution-info.outputs.startTime }}</code></li>
              <li>⏱ <strong>End Time:</strong> <code>${{ steps.execution-info.outputs.endTime }}</code></li>
              <li>⏱ <strong>Job Duration:</strong> <code>${{ steps.execution-info.outputs.formattedDuration }}</code></li>
          </ul>
          <hr style="dotted">
          <p><em>🤖 This is an automated message from a GitHub Actions workflow.<br>Please do not reply.</em></p>