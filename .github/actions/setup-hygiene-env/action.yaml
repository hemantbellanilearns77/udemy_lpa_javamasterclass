name: "Setup Hygiene Environment"
description: "Checkout, capture start time, setup Java, download tools, compile project"

inputs:
  # optional: you can allow override of java version
  java-version:
    description: "Java version to setup"
    required: false
    default: "24"

outputs:
  startTime:
    description: ""
    value: ${{ steps.start_time.outputs.startTime }}
  COMMIT_MSG:
    description: ""
    value: ${{ steps.setup_vars.outputs.COMMIT_MSG }}
  COMMIT_AUTHOR:
    description: ""
    value: ${{ steps.setup_vars.outputs.COMMIT_AUTHOR }}
  TRIGGER_EVENT:
    description: ""
    value: ${{ steps.setup_vars.outputs.TRIGGER_EVENT }}
  SRC_BRANCH:
    description: ""
    value: ${{ steps.setup_vars.outputs.SRC_BRANCH }}
  TGT_BRANCH:
    description: ""
    value: ${{ steps.setup_vars.outputs.TGT_BRANCH }}
  BRANCH_EXECUTED:
    description: ""
    value: ${{ steps.setup_vars.outputs.BRANCH_EXECUTED }}
  SKIP_FLAG:
    description: "Sonar skip flag"
    value: ${{ steps.setup_vars.outputs.SKIP_FLAG }}

runs:
  using: "composite"
  steps:

    # 1. Capture start time
    - name: Capture Start Time
      id: start_time
      uses: ./.github/actions/setup-starttime

    - name: Log Captured Start Time
      run: |
        echo "üïí Workflow Start Time captured from setup-hygiene-env: ${{ steps.setup.outputs.startTime }}"
      shell: pwsh

    - name: Setup common varaibles
      id: setup_vars
      shell: pwsh
      env:
        COMMIT_MSG: ${{ github.event.head_commit.message || github.event.pull_request.title || '' }}
        TRIGGER_EVENT: ${{ github.event_name }}
        TRIGGER_BRANCH: ${{ github.ref_name }}
        SOURCE_BRANCH: ${{ github.head_ref }}
        PR_SOURCE_BRANCH: ${{ github.event.pull_request.head.ref || '' }}
        PR_TARGET_BRANCH: ${{ github.event.pull_request.base.ref || '' }}
      run: |
        Write-Host "üîé Setting up common variables"
        $SKIP_FLAG = "--skip-sonar"
        $REASON = ""
        $TRIGGER_EVENT = $env:TRIGGER_EVENT
        Write-Host "Reached beyond initializetion of TRIGGER EVENT"
        # Determine source and target branches explicitly, preserving your variable names
        if ($env:TRIGGER_EVENT -ieq "pull_request") {
          $COMMIT_MSG = "${{ github.event.pull_request.title }}"
          $COMMIT_AUTHOR="${{ github.event.pull_request.user.login }}"
          $SRC_BRANCH = $env:PR_SOURCE_BRANCH
          $TGT_BRANCH = $env:PR_TARGET_BRANCH
          $BRANCH_EXECUTED = "$SRC_BRANCH ‚Üí $TGT_BRANCH"
        } elseif (($env:TRIGGER_EVENT -ieq "workflow_dispatch") -or ($env:TRIGGER_EVENT -ieq "schedule")) {
          # Handle manual dispatch case
          git fetch --depth=0 origin main
          git checkout main
          # $COMMIT_MSG = "Manual dispatch - no commit associated" or "Scheduled run - no commit associated"
          $COMMIT_MSG = $(git log -1 --pretty=%B)
          $COMMIT_AUTHOR = $(git log -1 --pretty=%an)
          $SRC_BRANCH = "${{ github.ref_name }}"
          $TGT_BRANCH = "${{ github.ref_name }}"
          $BRANCH_EXECUTED = $SRC_BRANCH
        } else {
          $COMMIT_MSG = "${{ github.event.head_commit.message }}"
          $COMMIT_AUTHOR = "${{ github.event.head_commit.author.username }}"
          $SRC_BRANCH = $env:SOURCE_BRANCH
          $TGT_BRANCH = $env:TRIGGER_BRANCH
          $BRANCH_EXECUTED = $TGT_BRANCH
        }
        $REASON = ""
        
        # Case 1: Manual override ‚Üí always skip
        if ($COMMIT_MSG -match "--skip-sonar" ) {
          $SKIP_FLAG = "--skip-sonar"
          $REASON = "‚ö° Commit message override ‚Üí SKIP Sonar"
        }
        # Case 2: Scheduled run on main
        elseif ($env:TRIGGER_EVENT -ieq "schedule") {
          $SKIP_FLAG = ""
          $REASON = "‚ö° Scheduled run ‚Üí RUN Sonar"
        }
        # Case 3: Direct push to main
        elseif ($TGT_BRANCH -ieq "main" -and [string]::IsNullOrEmpty($SRC_BRANCH)) {
          $SKIP_FLAG = ""
          $SRC_BRANCH="main"
          $BRANCH_EXECUTED = $TGT_BRANCH
          $REASON = "‚ö° Direct commit to main ‚Üí RUN Sonar"
        }
        # Case 4: PR from any branch ‚Üí main
        elseif ($TGT_BRANCH -ieq "main") {
          $SKIP_FLAG = ""
          $REASON = "‚ö° PR into main ‚Üí RUN Sonar"
        }
        # Case 5: PR into stage or tech-debt ‚Üí skip
        elseif ($TGT_BRANCH -ieq "stage" -or $TGT_BRANCH -ieq "tech-debt") {
          $SKIP_FLAG = "--skip-sonar"
          $REASON = "‚ö° PR into stage/tech-debt ‚Üí SKIP Sonar"
        }
        else {
          $REASON = "‚ö° Default ‚Üí SKIP Sonar (SRC=$SRC_BRANCH, TGT=$TGT_BRANCH)"
        }
        if ([string]::IsNullOrEmpty($SKIP_FLAG)) {
          Write-Host "‚úÖ Sonar will RUN | $REASON"
        } else {
          Write-Host "‚è≠Ô∏è Sonar will SKIP | $REASON"
        }
        
        # Log for verification
        Write-Host "SKIP_FLAG=$SKIP_FLAG"
        Write-Host "COMMIT_MSG=$COMMIT_MSG"
        Write-Host "COMMIT_AUTHOR=$COMMIT_AUTHOR"
        Write-Host "SRC_BRANCH=$SRC_BRANCH"
        Write-Host "TGT_BRANCH=$TGT_BRANCH"
        Write-Host "TRIGGER_EVENT=$TRIGGER_EVENT"
        Write-Host "BRANCH_EXECUTED=$BRANCH_EXECUTED"
        
        "SKIP_FLAG=$SKIP_FLAG" >>  $env:GITHUB_OUTPUT
        "COMMIT_MSG=$COMMIT_MSG" >>  $env:GITHUB_OUTPUT
        "COMMIT_AUTHOR=$COMMIT_AUTHOR" >>  $env:GITHUB_OUTPUT        
        "TRIGGER_EVENT=$TRIGGER_EVENT" >>  $env:GITHUB_OUTPUT
        "SRC_BRANCH=$SRC_BRANCH" >>  $env:GITHUB_OUTPUT
        "TGT_BRANCH=$TGT_BRANCH" >>  $env:GITHUB_OUTPUT
        "BRANCH_EXECUTED=$BRANCH_EXECUTED" >>  $env:GITHUB_OUTPUT

    # 2.a Setup Java
    - name: Setup Java (Temurin)
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ inputs.java-version }}
      continue-on-error: true

    # 2.b Fallback for Setup Java
    - name: Fallback Setup Java (Zulu)
      if: failure()
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: ${{ inputs.java-version }}

    # 3. Download Tools & Setup
    - name: Download Tools & Setup
      uses: ./.github/actions/download-setup-tools

    # 4. Compile Java Modules
    - name: Compile Java Modules
      shell: cmd
      run: |
        setlocal enabledelayedexpansion
        set "JAVA_HOME=%JAVA_HOME%"
        set "OUT_PROD=out\production"
        set "OUT_TEST=out\test"
        set "SRC_MAIN=src\main\java"
        set "SRC_MISC=misc_utils\src\main\java"
        set "TEST_MAIN=src\test\java"
        set "TEST_MISC=misc_utils\src\test\java"
        set "JUNIT_JAR=tools\junit-console\junit-platform-console-standalone-1.13.0.jar"

        echo üîπ Cleaning output directories
        rmdir /s /q "%OUT_PROD%" >nul 2>&1
        rmdir /s /q "%OUT_TEST%" >nul 2>&1
        mkdir "%OUT_PROD%\udemy_lpa_javamasterclass"
        mkdir "%OUT_PROD%\misc_utils"
        mkdir "%OUT_TEST%\udemy_lpa_javamasterclass"
        mkdir "%OUT_TEST%\misc_utils"

        REM -----------------------------
        REM Compile main module
        REM -----------------------------
        echo üîπ Compiling udemy_lpa_javamasterclass
        dir /s /b "%SRC_MAIN%\*.java" > sources_main.txt
        set /a count_main=0
        for /f %%f in (sources_main.txt) do set /a count_main+=1
        echo üîπ Number of main Java files: !count_main!
        if !count_main! GTR 0 (
            if exist sources_main.txt (
                javac --enable-preview --release 24 -encoding UTF-8 -d "%OUT_PROD%\udemy_lpa_javamasterclass" @sources_main.txt
                if !errorlevel! NEQ 0 (
                    echo ‚ùå Compilation failed for udemy_lpa_javamasterclass
                    exit /b !errorlevel!
                )
                echo ‚úÖ Finished compiling udemy_lpa_javamasterclass
            )
        ) else (
            echo ‚ö†Ô∏è No main Java files found ‚Äî skipping compilation
        )
    
        REM -----------------------------
        REM Compile misc_utils
        REM -----------------------------
        echo üîπ Compiling misc_utils
        dir /s /b "%SRC_MISC%\*.java" > sources_misc.txt
        set /a count_misc=0
        for /f %%f in (sources_misc.txt) do set /a count_misc+=1
        echo üîπ !count_misc! misc_utils files
        if !count_misc! GTR 0 (
            if exist sources_misc.txt (
                javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass" -d "%OUT_PROD%\misc_utils" @sources_misc.txt
                if !errorlevel! NEQ 0 (
                    echo ‚ùå Compilation failed for misc_utils
                    exit /b !errorlevel!
                )
                echo ‚úÖ Finished compiling misc_utils
            )
        ) else (
            echo ‚ö†Ô∏è No misc_utils Java files found ‚Äî skipping compilation
        )
    
        REM -----------------------------
        REM Compile test modules
        REM -----------------------------
        for %%MOD in MAIN MISC do (
            if "%%MOD"=="MAIN" (
                set SRC=!TEST_MAIN!
                set OUT=!OUT_TEST!\udemy_lpa_javamasterclass
                set MOD_NAME=udemy_lpa_javamasterclass
            ) else (
                set SRC=!TEST_MISC!
                set OUT=!OUT_TEST!\misc_utils
                set MOD_NAME=misc_utils
            )
            set /a TEST_COUNT=0
            for /f %%f in ('dir /s /b "!SRC!\*.java" 2^>nul') do set /a TEST_COUNT+=1
            echo üîπ Compiling tests (!MOD_NAME!)
            echo üîπ Number of test files (!MOD_NAME!): !TEST_COUNT!
            if !TEST_COUNT! GTR 0 (
                dir /s /b "!SRC!\*.java" > sources_test.txt
                javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "!OUT!" @sources_test.txt
                if !errorlevel! NEQ 0 (
                    echo ‚ùå Compilation failed for !MOD_NAME! tests
                    exit /b !errorlevel!
                )
                del sources_test.txt
                echo ‚úÖ Finished compiling !MOD_NAME! tests
            ) else (
                echo ‚ö†Ô∏è No test files found for !MOD_NAME! ‚Äî skipping test compilation
            )
        )
    
        REM -----------------------------
        REM Cleanup
        REM -----------------------------
        del sources_main.txt sources_misc.txt sources_test.txt >nul 2>&1
        echo ‚úÖ Compilation step completed successfully
