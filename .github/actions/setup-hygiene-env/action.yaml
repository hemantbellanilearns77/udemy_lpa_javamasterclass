name: "Setup Hygiene Environment"
description: "Checkout, capture start time, setup Java, download tools, compile project"

inputs:
  # optional: you can allow override of java version
  java-version:
    description: "Java version to setup"
    required: false
    default: "24"

outputs:
  startTime:
    description: ""
    value: ${{ steps.start_time.outputs.startTime }}
  COMMIT_MSG:
    description: ""
    value: ${{ steps.setup_vars.outputs.COMMIT_MSG }}
  TRIGGER_EVENT:
    description: ""
    value: ${{ steps.setup_vars.outputs.TRIGGER_EVENT }}
  SRC_BRANCH:
    description: ""
    value: ${{ steps.setup_vars.outputs.SRC_BRANCH }}
  TGT_BRANCH:
    description: ""
    value: ${{ steps.setup_vars.outputs.TGT_BRANCH }}
  BRANCH_EXECUTED:
    description: ""
    value: ${{ steps.setup_vars.outputs.BRANCH_EXECUTED }}
  SKIP_FLAG:
    description: "Sonar skip flag"
    value: ${{ steps.setup_vars.outputs.SKIP_FLAG }}

runs:
  using: "composite"
  steps:

    # 1. Capture start time
    - name: Capture Start Time
      id: start_time
      uses: ./.github/actions/setup-starttime

    - name: Log Captured Start Time
      run: |
          echo "🕒 Workflow Start Time captured from setup-hygiene-env: ${{ steps.setup.outputs.startTime }}"
      shell: pwsh

    - name: Setup common varaibles
      id: setup_vars
      shell: pwsh
      env:
        COMMIT_MSG: ${{ github.event.head_commit.message || github.event.pull_request.title || '' }}
        TRIGGER_EVENT: ${{ github.event_name }}
        TRIGGER_BRANCH: ${{ github.ref_name }}
        SOURCE_BRANCH: ${{ github.head_ref }}
        PR_SOURCE_BRANCH: ${{ github.event.pull_request.head.ref || '' }}
        PR_TARGET_BRANCH: ${{ github.event.pull_request.base.ref || '' }}
      run: |
        Write-Host "🔎 Setting up common variables"
        $SKIP_FLAG = "--skip-sonar"
        $REASON = ""
        $TRIGGER_EVENT = $env:TRIGGER_EVENT
        # Determine source and target branches explicitly, preserving your variable names
        if ($env:TRIGGER_EVENT -ieq "pull_request") {
          $COMMIT_MSG = "${{ github.event.pull_request.title }}"
          $SRC_BRANCH = $env:PR_SOURCE_BRANCH
          $TGT_BRANCH = $env:PR_TARGET_BRANCH
          $BRANCH_EXECUTED = "$SRC_BRANCH → $TGT_BRANCH"
        } else {
          $COMMIT_MSG = "${{ github.event.head_commit.message }}"
          $SRC_BRANCH = $env:SOURCE_BRANCH
          $TGT_BRANCH = $env:TRIGGER_BRANCH
          $BRANCH_EXECUTED = $TGT_BRANCH
        }
        $REASON = ""
            
        # Case 1: Manual override → always skip
        if ($COMMIT_MSG -match "--skip-sonar" ) {
          $SKIP_FLAG = "--skip-sonar"
          $REASON = "⚡ Commit message override → SKIP Sonar"
        }
        # Case 2: Scheduled run on main
        elseif ($env:TRIGGER_EVENT -ieq "schedule") {
          $SKIP_FLAG = ""
          $REASON = "⚡ Scheduled run → RUN Sonar"
        }
        # Case 3: Direct push to main
        elseif ($TGT_BRANCH -ieq "main" -and [string]::IsNullOrEmpty($SRC_BRANCH)) {
          $SKIP_FLAG = ""
          $SRC_BRANCH="main"
          $BRANCH_EXECUTED = $TGT_BRANCH
          $REASON = "⚡ Direct commit to main → RUN Sonar"
        }
        # Case 4: PR from any branch → main
        elseif ($TGT_BRANCH -ieq "main") {
          $SKIP_FLAG = ""
          $REASON = "⚡ PR into main → RUN Sonar"
        }
        # Case 5: PR into stage or tech-debt → skip
        elseif ($TGT_BRANCH -ieq "stage" -or $TGT_BRANCH -ieq "tech-debt") {
          $SKIP_FLAG = "--skip-sonar"
          $REASON = "⚡ PR into stage/tech-debt → SKIP Sonar"
        }
        else {
          $REASON = "⚡ Default → SKIP Sonar (SRC=$SRC_BRANCH, TGT=$TGT_BRANCH)"
        }
        if ([string]::IsNullOrEmpty($SKIP_FLAG)) {
          Write-Host "✅ Sonar will RUN | $REASON"
        } else {
          Write-Host "⏭️ Sonar will SKIP | $REASON"
        }
        
        # Log for verification
        Write-Host "SKIP_FLAG=$SKIP_FLAG"
        Write-Host "COMMIT_MSG=$COMMIT_MSG"
        Write-Host "SRC_BRANCH=$SRC_BRANCH"
        Write-Host "TGT_BRANCH=$TGT_BRANCH"
        Write-Host "TRIGGER_EVENT=$TRIGGER_EVENT"
        Write-Host "BRANCH_EXECUTED=$BRANCH_EXECUTED"
        
        "SKIP_FLAG=$SKIP_FLAG" >>  $env:GITHUB_OUTPUT
        "COMMIT_MSG=$COMMIT_MSG" >>  $env:GITHUB_OUTPUT
        "TRIGGER_EVENT=$TRIGGER_EVENT" >>  $env:GITHUB_OUTPUT
        "SRC_BRANCH=$SRC_BRANCH" >>  $env:GITHUB_OUTPUT
        "TGT_BRANCH=$TGT_BRANCH" >>  $env:GITHUB_OUTPUT
        "BRANCH_EXECUTED=$BRANCH_EXECUTED" >>  $env:GITHUB_OUTPUT

    # 2.a Setup Java
    - name: Setup Java (Temurin)
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ inputs.java-version }}
      continue-on-error: true

    # 2.b Fallback for Setup Java
    - name: Fallback Setup Java (Zulu)
      if: failure()
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: ${{ inputs.java-version }}

    # 3. Download Tools & Setup
    - name: Download Tools & Setup
      uses: ./.github/actions/download-setup-tools

    # 4. Compile Java Modules
    - name: Compile Java Modules
      shell: cmd
      run: |
        set "JAVA_HOME=%JAVA_HOME%"
        set "OUT_PROD=out\production"
        set "OUT_TEST=out\test"
        set "SRC_MAIN=src\main\java"
        set "SRC_MISC=misc_utils\src\main\java"
        set "TEST_MAIN=src\test\java"
        set "TEST_MISC=misc_utils\src\test\java"
        set "JUNIT_JAR=tools\junit-console\junit-platform-console-standalone-1.13.0.jar"

        if not exist "%OUT_PROD%\udemy_lpa_javamasterclass" (
          if not exist "%OUT_PROD%\misc_utils" (
            echo ? Compilation triggered

            rmdir /s /q "%OUT_PROD%" >nul 2>&1
            rmdir /s /q "%OUT_TEST%" >nul 2>&1

            mkdir "%OUT_PROD%\udemy_lpa_javamasterclass"
            mkdir "%OUT_PROD%\misc_utils"
            mkdir "%OUT_TEST%\udemy_lpa_javamasterclass"
            mkdir "%OUT_TEST%\misc_utils"

            echo ? Compiling udemy_lpa_javamasterclass
            dir /s /b "%SRC_MAIN%\*.java" > sources_main.txt
            javac --enable-preview --release 24 -encoding UTF-8 -d "%OUT_PROD%\udemy_lpa_javamasterclass" @sources_main.txt

            echo ? Compiling misc_utils
            dir /s /b "%SRC_MISC%\*.java" > sources_misc.txt
            javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass" -d "%OUT_PROD%\misc_utils" @sources_misc.txt

            echo ? Compiling tests (masterclass)
            dir /s /b "%TEST_MAIN%\*.java" > sources_test_main.txt
            javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\udemy_lpa_javamasterclass" @sources_test_main.txt

            echo ? Compiling tests (misc_utils)
            if exist "%TEST_MISC%" (
              dir /s /b "%TEST_MISC%\*.java" > sources_test_misc.txt
              javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\misc_utils" @sources_test_misc.txt
            )

            del sources_main.txt sources_misc.txt sources_test_main.txt sources_test_misc.txt
          )
        )

