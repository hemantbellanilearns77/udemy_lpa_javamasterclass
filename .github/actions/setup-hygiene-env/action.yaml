name: "Setup Hygiene Environment"
description: "Checkout, capture start time, setup Java, download tools, compile project"

inputs:
  # optional: you can allow override of java version
  java-version:
    description: "Java version to setup"
    required: false
    default: "24"
  trigger-event:
    required: true
    description: ""
  ref-name:
    required: true
    description: ""
  head-ref:
    required: true
    description: ""
  base-ref:
    required: true
    description: ""
  github-token:
    required: true
    description: ""

outputs:
  startTime:
    description: ""
    value: ${{ steps.start_time.outputs.startTime }}
  COMMIT_MSG:
    description: ""
    value: ${{ steps.setup_vars.outputs.COMMIT_MSG }}
  COMMIT_AUTHOR:
    description: ""
    value: ${{ steps.setup_vars.outputs.COMMIT_AUTHOR }}
  TRIGGER_EVENT:
    description: ""
    value: ${{ steps.setup_vars.outputs.TRIGGER_EVENT }}
  SRC_BRANCH:
    description: ""
    value: ${{ steps.setup_vars.outputs.SRC_BRANCH }}
  TGT_BRANCH:
    description: ""
    value: ${{ steps.setup_vars.outputs.TGT_BRANCH }}
  BRANCH_EXECUTED:
    description: ""
    value: ${{ steps.setup_vars.outputs.BRANCH_EXECUTED }}
  SKIP_FLAG:
    description: "Sonar skip flag"
    value: ${{ steps.setup_vars.outputs.SKIP_FLAG }}
  scanner_bin_win:
    description: "The Windows-formatted path to the scanner's bin directory"
    value: ${{ steps.download-tools-setup.outputs.scanner_bin_win }}

runs:
  using: "composite"
  steps:

    # 1. Capture start time
    - name: Capture Start Time
      id: start_time
      uses: ./.github/actions/setup-starttime

    - name: Log Captured Start Time
      run: |
        echo "üïí Workflow Start Time captured from setup-hygiene-env: ${{ steps.start_time.outputs.startTime }}"
      shell: pwsh

    - name: Setup common varaibles
      id: setup_vars
      shell: pwsh
      env:
        TRIGGER_EVENT: ${{ inputs.trigger-event }}
        GITHUB_REF_NAME: ${{ inputs.ref-name }}
        GITHUB_HEAD_REF: ${{ inputs.head-ref }}
        GITHUB_BASE_REF: ${{ inputs.base-ref }}
        GITHUB_TOKEN: ${{ inputs.github-token  }}
      run: |
        Write-Host "üîé Setting up common variables"
        Write-Host "Token available: $env:GITHUB_TOKEN"

        $TRIGGER_EVENT = $env:TRIGGER_EVENT
        $GITHUB_REF_NAME = $env:GITHUB_REF_NAME
        $GITHUB_HEAD_REF = $env:GITHUB_HEAD_REF
        $GITHUB_BASE_REF = $env:GITHUB_BASE_REF
        
        # --- Always fetch latest commit info ---
        git fetch origin +refs/heads/*:refs/remotes/origin/* || Write-Host "‚ö†Ô∏è Could not fetch origin"
        
        # --- Last commit info ---
        $LAST_COMMIT_MSG = git log -1 --pretty=%B
        $LAST_COMMIT_AUTHOR = git log -1 --pretty=%an
        $COMMIT_MSG = $LAST_COMMIT_MSG
        $COMMIT_AUTHOR = $LAST_COMMIT_AUTHOR
        $prDetected=$false
        $prMergePattern = '(Merge|Merged)\s+(pull request|PR)'
                
        $DEFAULT_BRANCH = "${{ github.event.repository.default_branch }}"
        
        # --- Determine source and target branches ---
        if ($TRIGGER_EVENT -ieq "workflow_dispatch" -or $TRIGGER_EVENT -ieq "schedule") {
            $SRC_BRANCH = $GITHUB_REF_NAME
            $TGT_BRANCH = $DEFAULT_BRANCH
        } elseif ($TRIGGER_EVENT -ieq "push") {

            # Default target branch is the branch receiving the push
            $TGT_BRANCH = $GITHUB_REF_NAME
        
            # Get last commit info
            $LAST_COMMIT_MSG = git log -1 --pretty=%B
            $commitSHA = git rev-parse HEAD
        
            # Detect merge commit patterns anywhere in the message
            
        
            if ($LAST_COMMIT_MSG -imatch $prMergePattern) {
              Write-Host "‚ö° Merge commit detected via PR ‚Üí querying PR info"
        
              if (-not $env:GITHUB_TOKEN) {
                Write-Host "‚ùå GITHUB_TOKEN not available. Cannot query PR info."
                $SRC_BRANCH = $TGT_BRANCH
              } else {
              try {
                # Query PR for source branch using commit SHA
                $prResponse = gh api repos/${{ github.repository }}/commits/$commitSHA/pulls --jq '.[0].head.ref' 2>$null
            
                if (-not [string]::IsNullOrEmpty($prResponse)) {
                  $SRC_BRANCH = $prResponse
                  $prDetected = $true
                  Write-Host "‚úÖ Detected PR source branch: $SRC_BRANCH"
        
                } else {
                  $SRC_BRANCH = $TGT_BRANCH
                  Write-Host "‚ö° Could not detect PR ‚Üí assuming direct commit"
                } 
              } catch {
                Write-Host "‚ö†Ô∏è Error querying PR info: $_"
                $SRC_BRANCH = $TGT_BRANCH
              }
            } # ebd of if last commit has prmergoattern
          } else {
            # Regular direct commit
            Write-Host "‚ö° Regular direct commit on $TGT_BRANCH"
            $SRC_BRANCH = $TGT_BRANCH
          }
        }
        
        $BRANCH_EXECUTED = $TGT_BRANCH
        Write-Host "‚úÖ SRC_BRANCH=$SRC_BRANCH | TGT_BRANCH=$TGT_BRANCH | BRANCH_EXECUTED=$BRANCH_EXECUTED"

        $REASON = ""
        $skipSonarPattern = "(?i)skip.*sonar|sonar.*skip"
        
        # Case 1: Commit message override ‚Üí always take precedence
        if ($LAST_COMMIT_MSG -match $skipSonarPattern) {
          $SKIP_FLAG = "--skip-sonar"
          $REASON = "‚ö° PR Merge / Push Commit message override ‚Üí SKIP Sonar"
        }
        # Case 2: Scheduled run on main
        elseif ($TRIGGER_EVENT -ieq "schedule") { 
          $SKIP_FLAG = ""
          $REASON = "‚ö° Scheduled run ‚Üí RUN Sonar"
        }
        # Case 3: Manual workflow_dispatch 
          elseif ($TRIGGER_EVENT -ieq "workflow_dispatch") {
          if($TGT_BRANCH -ieq $DEFAULT_BRANCH) {
            $SKIP_FLAG = ""
            $REASON = "‚ö° Manual workflow_dispatch on default branch (main) with last commit message NOT having skipsonar pattern string, therefore ‚Üí RUN Sonar"
          } else {
            $SKIP_FLAG = "--skip-sonar"
            $REASON = "‚ö° Manual workflow_dispatch on non-default branch (i.e. non-main), therefore ‚Üí SKIP Sonar"
          }
        } else {
          $REASON = "‚ö° Default ‚Üí SKIP Sonar (SRC=$SRC_BRANCH, TGT=$TGT_BRANCH)"
        }
        # fallback
        if ([string]::IsNullOrEmpty($SKIP_FLAG)) {
          Write-Host "‚úÖ Sonar will RUN | $REASON"
        } else {
          Write-Host "‚è≠Ô∏è Sonar will SKIP | $REASON"
        }
        

        if ([string]::IsNullOrWhiteSpace($SKIP_FLAG)) {
          Write-Host "üß™ $prMergePattern was not found in the Last Commit Message ( $COMMIT_MSG ) therefore defaulting SKIP_FLAG variable to : '‚ö†Ô∏è Empty Skip Flag ‚ö†Ô∏è '"
          $SKIP_FLAG = "‚ö†Ô∏è Empty Skip Flag ‚ö†Ô∏è "
        }
        
        # Log for verification
        Write-Host "SKIP_FLAG=$SKIP_FLAG"
        Write-Host "COMMIT_MSG=$COMMIT_MSG"
        Write-Host "COMMIT_AUTHOR=$COMMIT_AUTHOR"
        Write-Host "SRC_BRANCH=$SRC_BRANCH"
        Write-Host "TGT_BRANCH=$TGT_BRANCH"
        Write-Host "TRIGGER_EVENT=$TRIGGER_EVENT"
        Write-Host "BRANCH_EXECUTED=$BRANCH_EXECUTED"
        
        "SKIP_FLAG=$SKIP_FLAG" >>  $env:GITHUB_OUTPUT
        "COMMIT_MSG=$COMMIT_MSG" >>  $env:GITHUB_OUTPUT
        "COMMIT_AUTHOR=$COMMIT_AUTHOR" >>  $env:GITHUB_OUTPUT        
        "TRIGGER_EVENT=$TRIGGER_EVENT" >>  $env:GITHUB_OUTPUT
        "SRC_BRANCH=$SRC_BRANCH" >>  $env:GITHUB_OUTPUT
        "TGT_BRANCH=$TGT_BRANCH" >>  $env:GITHUB_OUTPUT
        "BRANCH_EXECUTED=$BRANCH_EXECUTED" >>  $env:GITHUB_OUTPUT

    # 2.a Setup Java
    - name: Setup Java (Temurin)
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ inputs.java-version }}
      continue-on-error: true

    # 2.b Fallback for Setup Java
    - name: Fallback Setup Java (Zulu)
      if: failure()
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: ${{ inputs.java-version }}

    # 3. Download Tools & Setup
    - name: Download Tools & Setup
      id: download-tools-setup
      uses: ./.github/actions/download-setup-tools

    # 4. Compile Java Modules
    - name: Compile Java Modules
      shell: cmd
      run: |
      # 4. Compile Java Modules
    - name: Compile Java Modules
      shell: cmd
      run: |
        REM -----------------------------
        REM Enable delayed expansion
        REM -----------------------------
        setlocal enabledelayedexpansion
        
        set "JAVA_HOME=%JAVA_HOME%"
        set "OUT_PROD=out\production"
        set "OUT_TEST=out\test"
        set "SRC_MAIN=src\main\java"
        set "SRC_MISC=misc_utils\src\main\java"
        set "TEST_MAIN=src\test\java"
        set "TEST_MISC=misc_utils\src\test\java"
        set "JUNIT_JAR=tools\junit-console\junit-platform-console-standalone-1.13.0.jar"

        echo üîπ Cleaning output directories
        rmdir /s /q "%OUT_PROD%" >nul 2>&1
        rmdir /s /q "%OUT_TEST%" >nul 2>&1
        mkdir "%OUT_PROD%\udemy_lpa_javamasterclass"
        mkdir "%OUT_PROD%\misc_utils"
        mkdir "%OUT_TEST%\udemy_lpa_javamasterclass"
        mkdir "%OUT_TEST%\misc_utils"

        REM -----------------------------
        REM Compile main module
        REM -----------------------------
        echo üîπ Compiling udemy_lpa_javamasterclass
        dir /s /b "%SRC_MAIN%\*.java" > sources_main.txt
        set /a count_main=0
        for /f %%f in (sources_main.txt) do set /a count_main+=1
        echo üîπ Number of main Java files: !count_main!

        if  !count_main! GTR 0 (
            javac --enable-preview --release 24 -encoding UTF-8 -d "%OUT_PROD%\udemy_lpa_javamasterclass" @sources_main.txt
            if !ERRORLEVEL! NEQ 0 (
                echo ‚ùå Compilation failed for udemy_lpa_javamasterclass
                exit /b 1
            )
            echo ‚úÖ Finished compiling udemy_lpa_javamasterclass
        ) else (
            echo ‚ö†Ô∏è No main Java files found
        )

        REM -----------------------------
        REM Compile misc_utils
        REM -----------------------------
        echo üîπ Compiling misc_utils
        dir /s /b "%SRC_MISC%\*.java" > sources_misc.txt
        set /a count_misc=0
        for /f %%f in (sources_misc.txt) do set /a count_misc+=1
        echo üîπ !count_misc! misc_utils files
        if !count_misc! GTR 0 (
            javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass" -d "%OUT_PROD%\misc_utils" @sources_misc.txt
            if !ERRORLEVEL! NEQ 0 (
                echo ‚ùå Compilation failed for misc_utils
                exit /b 1
            )
            echo ‚úÖ Finished compiling misc_utils
        ) else (
            echo ‚ö†Ô∏è No misc_utils Java files found
        )

        REM -----------------------------
        REM Compile test modules
        REM -----------------------------
        echo üîπ Compiling tests (udemy_lpa_javamasterclass)
        dir /s /b "%TEST_MAIN%\*.java" > sources_test_main.txt
        set /a count_test_main=0
        for /f %%f in (sources_test_main.txt) do set /a count_test_main+=1
        echo üîπ !count_test_main! test files (masterclass)
        if !count_test_main! GTR 0 (
            javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\udemy_lpa_javamasterclass" @sources_test_main.txt
            if !ERRORLEVEL! NEQ 0 (
                echo ‚ùå Compilation failed for udemy_lpa_javamasterclass tests
                exit /b 1
            )
            echo ‚úÖ Finished compiling udemy_lpa_javamasterclass tests
        ) else (
            echo ‚ö†Ô∏è No test files found for masterclass
        )

        echo üîπ Compiling tests (misc_utils)
        if exist "!TEST_MISC!" (
            dir /s /b "%TEST_MISC%\*.java" > sources_test_misc.txt
            set /a count_test_misc=0
            for /f %%f in (sources_test_misc.txt) do set /a count_test_misc+=1
            echo üîπ !count_test_misc! test files (misc_utils)
            if !count_test_misc! GTR 0 (
                javac --enable-preview --release 24 -encoding UTF-8 -cp "%OUT_PROD%\udemy_lpa_javamasterclass;%OUT_PROD%\misc_utils;%JUNIT_JAR%" -d "%OUT_TEST%\misc_utils" @sources_test_misc.txt
                if !ERRORLEVEL! NEQ 0 (
                    echo ‚ùå Compilation failed for misc_utils tests
                    exit /b 1
                )
                echo ‚úÖ Finished compiling misc_utils tests
            ) else (
                echo ‚ö†Ô∏è No test files found for misc_utils
            )
        )

        REM -----------------------------
        REM Cleanup
        REM -----------------------------
        del sources_main.txt sources_misc.txt sources_test_main.txt sources_test_misc.txt >nul 2>&1
        echo ‚úÖ Compilation step completed successfully